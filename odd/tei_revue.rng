<?xml version="1.0" encoding="utf-8"?>
<grammar xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:tei="http://www.tei-c.org/ns/1.0"
         xmlns:teix="http://www.tei-c.org/ns/Examples"
         xmlns="http://relaxng.org/ns/structure/1.0"
         datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
         ns="http://www.tei-c.org/ns/1.0"><!--
Schema generated from ODD source 2024-04-27T15:44:46Z. . 
TEI Edition: P5 Version 4.7.0. Last updated on 16th November 2023, revision e5dd73ed0 
TEI Edition Location: https://www.tei-c.org/Vault/P5/4.7.0/ 
  
--><!--This material is dual-licensed.
[http://creativecommons.org/licenses/by-sa/3.0/] Distributed under a Creative Commons Attribution-ShareAlike 3.0 Unported License [http://www.opensource.org/licenses/BSD-2-Clause] Copyright 2013 TEI Consortium. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. This software is provided by the copyright holders and contributors "as is" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. In no event shall the copyright holder or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. TEI material can be licensed differently depending on the use you intend to make of it. Hence it is made available under both the CC+BY and BSD-2 licences. The CC+BY licence is generally appropriate for usages which treat TEI content as data or documentation. The BSD-2 licence is generally appropriate for usage of TEI content in a software environment. For further information or clarification, please contact the  TEI Consortium  .-->
   <define name="tei_macro.paraContent">
      <zeroOrMore>
         <choice>
            <text/>
            <ref name="tei_model.paraPart"/>
         </choice>
      </zeroOrMore>
   </define>
   <define name="tei_macro.limitedContent">
      <zeroOrMore>
         <choice>
            <text/>
            <ref name="tei_model.limitedPhrase"/>
            <ref name="tei_model.inter"/>
         </choice>
      </zeroOrMore>
   </define>
   <define name="tei_macro.phraseSeq">
      <zeroOrMore>
         <choice>
            <text/>
            <ref name="tei_model.gLike"/>
            <ref name="tei_model.attributable"/>
            <ref name="tei_model.phrase"/>
            <ref name="tei_model.global"/>
         </choice>
      </zeroOrMore>
   </define>
   <define name="tei_macro.phraseSeq.limited">
      <zeroOrMore>
         <choice>
            <text/>
            <ref name="tei_model.limitedPhrase"/>
            <ref name="tei_model.global"/>
         </choice>
      </zeroOrMore>
   </define>
   <define name="tei_macro.specialPara">
      <zeroOrMore>
         <choice>
            <text/>
            <ref name="tei_model.gLike"/>
            <ref name="tei_model.phrase"/>
            <ref name="tei_model.inter"/>
            <ref name="tei_model.divPart"/>
            <ref name="tei_model.global"/>
         </choice>
      </zeroOrMore>
   </define>
   <define name="tei_att.anchoring.attributes">
      <ref name="tei_att.anchoring.attribute.anchored"/>
      <ref name="tei_att.anchoring.attribute.targetEnd"/>
   </define>
   <define name="tei_att.anchoring.attribute.anchored">
      <optional>
         <attribute xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
                    name="anchored"
                    a:defaultValue="true">
            <a:documentation>(anchored) indicates whether the copy text shows the exact place of reference for the note.</a:documentation>
            <data type="boolean"/>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.anchoring.attribute.targetEnd">
      <optional>
         <attribute name="targetEnd">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(target end) points to the end of the span to which the note is attached, if the note is not embedded in the text at that point.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.ascribed.attributes">
      <ref name="tei_att.ascribed.attribute.who"/>
   </define>
   <define name="tei_att.ascribed.attribute.who">
      <optional>
         <attribute name="who">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the person, or group of people, to whom the element content is ascribed.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.ascribed.directed.attributes">
      <ref name="tei_att.ascribed.attributes"/>
      <ref name="tei_att.ascribed.directed.attribute.toWhom"/>
   </define>
   <define name="tei_att.ascribed.directed.attribute.toWhom">
      <optional>
         <attribute name="toWhom">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the person, or group of people, to whom a speech act or action is directed.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.canonical.attributes">
      <ref name="tei_att.canonical.attribute.key"/>
      <ref name="tei_att.canonical.attribute.ref"/>
   </define>
   <define name="tei_att.canonical.attribute.key">
      <optional>
         <attribute name="key">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind.</a:documentation>
            <data type="string"/>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.canonical.attribute.ref">
      <optional>
         <attribute name="ref">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(reference) provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.ranging.attributes">
      <ref name="tei_att.ranging.attribute.atLeast"/>
      <ref name="tei_att.ranging.attribute.atMost"/>
      <ref name="tei_att.ranging.attribute.min"/>
      <ref name="tei_att.ranging.attribute.max"/>
      <ref name="tei_att.ranging.attribute.confidence"/>
   </define>
   <define name="tei_att.ranging.attribute.atLeast">
      <optional>
         <attribute name="atLeast">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">gives a minimum estimated value for the approximate measurement.</a:documentation>
            <choice>
               <data type="double"/>
               <data type="token">
                  <param name="pattern">(\-?[\d]+/\-?[\d]+)</param>
               </data>
               <data type="decimal"/>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.ranging.attribute.atMost">
      <optional>
         <attribute name="atMost">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">gives a maximum estimated value for the approximate measurement.</a:documentation>
            <choice>
               <data type="double"/>
               <data type="token">
                  <param name="pattern">(\-?[\d]+/\-?[\d]+)</param>
               </data>
               <data type="decimal"/>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.ranging.attribute.min">
      <optional>
         <attribute name="min">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">where the measurement summarizes more than one observation or a range, supplies the minimum value observed.</a:documentation>
            <choice>
               <data type="double"/>
               <data type="token">
                  <param name="pattern">(\-?[\d]+/\-?[\d]+)</param>
               </data>
               <data type="decimal"/>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.ranging.attribute.max">
      <optional>
         <attribute name="max">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">where the measurement summarizes more than one observation or a range, supplies the maximum value observed.</a:documentation>
            <choice>
               <data type="double"/>
               <data type="token">
                  <param name="pattern">(\-?[\d]+/\-?[\d]+)</param>
               </data>
               <data type="decimal"/>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.ranging.attribute.confidence">
      <optional>
         <attribute name="confidence">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the degree of statistical confidence (between zero and one) that a value falls within the range specified by <code xmlns="http://www.w3.org/1999/xhtml">@min</code> and <code xmlns="http://www.w3.org/1999/xhtml">@max</code>, or the proportion of observed values that fall within that range.</a:documentation>
            <data type="double"/>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.dimensions.attributes">
      <ref name="tei_att.ranging.attributes"/>
      <ref name="tei_att.dimensions.attribute.unit"/>
      <ref name="tei_att.dimensions.attribute.quantity"/>
      <ref name="tei_att.dimensions.attribute.extent"/>
      <ref name="tei_att.dimensions.attribute.precision"/>
      <ref name="tei_att.dimensions.attribute.scope"/>
   </define>
   <define name="tei_att.dimensions.attribute.unit">
      <optional>
         <attribute name="unit">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">names the unit used for the measurement
Suggested values include: 1] cm (centimetres); 2] mm (millimetres); 3] in (inches); 4] line; 5] char (characters)</a:documentation>
            <choice>
               <value>cm</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(centimetres) </a:documentation>
               <value>mm</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(millimetres) </a:documentation>
               <value>in</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(inches) </a:documentation>
               <value>line</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">lines of text</a:documentation>
               <value>char</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(characters) characters of text</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.dimensions.attribute.quantity">
      <optional>
         <attribute name="quantity">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the length in the units specified</a:documentation>
            <choice>
               <data type="double"/>
               <data type="token">
                  <param name="pattern">(\-?[\d]+/\-?[\d]+)</param>
               </data>
               <data type="decimal"/>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.dimensions.attribute.extent">
      <optional>
         <attribute name="extent">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words.</a:documentation>
            <data type="string"/>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.dimensions.attribute.precision">
      <optional>
         <attribute name="precision">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the precision of the values specified by the other attributes.</a:documentation>
            <choice>
               <value>high</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
               <value>medium</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
               <value>low</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
               <value>unknown</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.dimensions.attribute.scope">
      <optional>
         <attribute name="scope">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">where the measurement summarizes more than one observation, specifies the applicability of this measurement.
Sample values include: 1] all; 2] most; 3] range</a:documentation>
            <data type="token">
               <param name="pattern">[^\p{C}\p{Z}]+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.written.attributes">
      <ref name="tei_att.written.attribute.hand"/>
   </define>
   <define name="tei_att.written.attribute.hand">
      <optional>
         <attribute name="hand">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">points to a <code xmlns="http://www.w3.org/1999/xhtml">&lt;handNote&gt;</code> element describing the hand considered responsible for the content of the element concerned.</a:documentation>
            <data type="anyURI">
               <param name="pattern">\S+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.breaking.attributes">
      <ref name="tei_att.breaking.attribute.break"/>
   </define>
   <define name="tei_att.breaking.attribute.break">
      <optional>
         <attribute name="break">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates whether or not the element bearing this attribute should be considered to mark the end of an orthographic token in the same way as whitespace.</a:documentation>
            <data type="token">
               <param name="pattern">[^\p{C}\p{Z}]+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.cReferencing.attributes">
      <ref name="tei_att.cReferencing.attribute.cRef"/>
   </define>
   <define name="tei_att.cReferencing.attribute.cRef">
      <optional>
         <attribute name="cRef">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(canonical reference) specifies the destination of the pointer by supplying a canonical reference expressed using the scheme defined in a <code xmlns="http://www.w3.org/1999/xhtml">&lt;refsDecl&gt;</code> element in the TEI header</a:documentation>
            <data type="string"/>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datable.w3c.attributes">
      <ref name="tei_att.datable.w3c.attribute.when"/>
      <ref name="tei_att.datable.w3c.attribute.notBefore"/>
      <ref name="tei_att.datable.w3c.attribute.notAfter"/>
      <ref name="tei_att.datable.w3c.attribute.from"/>
      <ref name="tei_att.datable.w3c.attribute.to"/>
   </define>
   <define name="tei_att.datable.w3c.attribute.when">
      <optional>
         <attribute name="when">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd.</a:documentation>
            <choice>
               <data type="date"/>
               <data type="gYear"/>
               <data type="gMonth"/>
               <data type="gDay"/>
               <data type="gYearMonth"/>
               <data type="gMonthDay"/>
               <data type="time"/>
               <data type="dateTime"/>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datable.w3c.attribute.notBefore">
      <optional>
         <attribute name="notBefore">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd.</a:documentation>
            <choice>
               <data type="date"/>
               <data type="gYear"/>
               <data type="gMonth"/>
               <data type="gDay"/>
               <data type="gYearMonth"/>
               <data type="gMonthDay"/>
               <data type="time"/>
               <data type="dateTime"/>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datable.w3c.attribute.notAfter">
      <optional>
         <attribute name="notAfter">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd.</a:documentation>
            <choice>
               <data type="date"/>
               <data type="gYear"/>
               <data type="gMonth"/>
               <data type="gDay"/>
               <data type="gYearMonth"/>
               <data type="gMonthDay"/>
               <data type="time"/>
               <data type="dateTime"/>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datable.w3c.attribute.from">
      <optional>
         <attribute name="from">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the starting point of the period in standard form, e.g. yyyy-mm-dd.</a:documentation>
            <choice>
               <data type="date"/>
               <data type="gYear"/>
               <data type="gMonth"/>
               <data type="gDay"/>
               <data type="gYearMonth"/>
               <data type="gMonthDay"/>
               <data type="time"/>
               <data type="dateTime"/>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datable.w3c.attribute.to">
      <optional>
         <attribute name="to">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the ending point of the period in standard form, e.g. yyyy-mm-dd.</a:documentation>
            <choice>
               <data type="date"/>
               <data type="gYear"/>
               <data type="gMonth"/>
               <data type="gDay"/>
               <data type="gYearMonth"/>
               <data type="gMonthDay"/>
               <data type="time"/>
               <data type="dateTime"/>
            </choice>
         </attribute>
      </optional>
   </define>
   <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
            id="tei_revue-att.datable.w3c-att-datable-w3c-when-constraint-rule-1">
      <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                xmlns:xi="http://www.w3.org/2001/XInclude"
                xmlns="http://www.tei-c.org/ns/1.0"
                context="tei:*[@when]">
        <sch:report role="nonfatal" test="@notBefore|@notAfter|@from|@to">The @when attribute cannot be used with any other att.datable.w3c attributes.</sch:report>
      </sch:rule>
   </pattern>
   <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
            id="tei_revue-att.datable.w3c-att-datable-w3c-from-constraint-rule-2">
      <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                xmlns:xi="http://www.w3.org/2001/XInclude"
                xmlns="http://www.tei-c.org/ns/1.0"
                context="tei:*[@from]">
        <sch:report role="nonfatal" test="@notBefore">The @from and @notBefore attributes cannot be used together.</sch:report>
      </sch:rule>
   </pattern>
   <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
            id="tei_revue-att.datable.w3c-att-datable-w3c-to-constraint-rule-3">
      <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                xmlns:xi="http://www.w3.org/2001/XInclude"
                xmlns="http://www.tei-c.org/ns/1.0"
                context="tei:*[@to]">
        <sch:report role="nonfatal" test="@notAfter">The @to and @notAfter attributes cannot be used together.</sch:report>
      </sch:rule>
   </pattern>
   <define name="tei_att.datable.attributes">
      <ref name="tei_att.datable.w3c.attributes"/>
      <ref name="tei_att.datable.iso.attributes"/>
      <ref name="tei_att.datable.custom.attributes"/>
      <ref name="tei_att.datable.attribute.period"/>
   </define>
   <define name="tei_att.datable.attribute.period">
      <optional>
         <attribute name="period">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies pointers to one or more definitions of named periods of time (typically <code xmlns="http://www.w3.org/1999/xhtml">&lt;category&gt;</code>s, <code xmlns="http://www.w3.org/1999/xhtml">&lt;date&gt;</code>s or <code xmlns="http://www.w3.org/1999/xhtml">&lt;event&gt;</code>s) within which the datable item is understood to have occurred.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datcat.attributes">
      <ref name="tei_att.datcat.attribute.datcat"/>
      <ref name="tei_att.datcat.attribute.valueDatcat"/>
      <ref name="tei_att.datcat.attribute.targetDatcat"/>
   </define>
   <define name="tei_att.datcat.attribute.datcat">
      <optional>
         <attribute name="datcat">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">provides a pointer to a definition of, and/or general information about, (a) an information container (element or attribute) or (b) a value of an information container (element content or attribute value), by referencing an external taxonomy or ontology. If <code xmlns="http://www.w3.org/1999/xhtml">@valueDatcat</code> is present in the immediate context, this attribute takes on role (a), while <code xmlns="http://www.w3.org/1999/xhtml">@valueDatcat</code> performs role (b).</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datcat.attribute.valueDatcat">
      <optional>
         <attribute name="valueDatcat">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">provides a definition of, and/or general information about a value of an information container (element content or attribute value), by reference to an external taxonomy or ontology. Used especially where a contrast with <code xmlns="http://www.w3.org/1999/xhtml">@datcat</code> is needed.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datcat.attribute.targetDatcat">
      <optional>
         <attribute name="targetDatcat">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">provides a definition of, and/or general information about, information structure of an object referenced or modeled by the containing element, by reference to an external taxonomy or ontology. This attribute has the characteristics of the <code xmlns="http://www.w3.org/1999/xhtml">@datcat</code> attribute, except that it addresses not its containing element, but an object that is being referenced or modeled by its containing element.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.declarable.attributes">
      <ref name="tei_att.declarable.attribute.default"/>
   </define>
   <define name="tei_att.declarable.attribute.default">
      <optional>
         <attribute xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
                    name="default"
                    a:defaultValue="false">
            <a:documentation>indicates whether or not this element is selected by default when its parent is selected.</a:documentation>
            <choice>
               <value>true</value>
               <a:documentation>This element is selected if its parent is selected</a:documentation>
               <value>false</value>
               <a:documentation>This element can only be selected explicitly, unless it is the only one of its kind, in which case it is selected if its parent is selected.</a:documentation>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.declaring.attributes">
      <ref name="tei_att.declaring.attribute.decls"/>
   </define>
   <define name="tei_att.declaring.attribute.decls">
      <optional>
         <attribute name="decls">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(declarations) identifies one or more declarable elements within the header, which are understood to apply to the element bearing this attribute and its content.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.fragmentable.attributes">
      <ref name="tei_att.fragmentable.attribute.part"/>
   </define>
   <define name="tei_att.fragmentable.attribute.part">
      <optional>
         <attribute xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
                    name="part"
                    a:defaultValue="N">
            <a:documentation>specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers.</a:documentation>
            <choice>
               <value>Y</value>
               <a:documentation>(yes) the element is fragmented in some (unspecified) respect</a:documentation>
               <value>N</value>
               <a:documentation>(no) the element is not fragmented, or no claim is made as to its completeness</a:documentation>
               <value>I</value>
               <a:documentation>(initial) this is the initial part of a fragmented element</a:documentation>
               <value>M</value>
               <a:documentation>(medial) this is a medial part of a fragmented element</a:documentation>
               <value>F</value>
               <a:documentation>(final) this is the final part of a fragmented element</a:documentation>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.divLike.attributes">
      <ref name="tei_att.fragmentable.attributes"/>
      <ref name="tei_att.divLike.attribute.org"/>
      <ref name="tei_att.divLike.attribute.sample"/>
   </define>
   <define name="tei_att.divLike.attribute.org">
      <optional>
         <attribute xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
                    name="org"
                    a:defaultValue="uniform">
            <a:documentation>(organization) specifies how the content of the division is organized.</a:documentation>
            <choice>
               <value>composite</value>
               <a:documentation>no claim is made about the sequence in which the immediate contents of this division are to be processed, or their inter-relationships.</a:documentation>
               <value>uniform</value>
               <a:documentation>the immediate contents of this element are regarded as forming a logical unit, to be processed in sequence.</a:documentation>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.divLike.attribute.sample">
      <optional>
         <attribute xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
                    name="sample"
                    a:defaultValue="complete">
            <a:documentation>indicates whether this division is a sample of the original source and if so, from which part.</a:documentation>
            <choice>
               <value>initial</value>
               <a:documentation>division lacks material present at end in source.</a:documentation>
               <value>medial</value>
               <a:documentation>division lacks material at start and end.</a:documentation>
               <value>final</value>
               <a:documentation>division lacks material at start.</a:documentation>
               <value>unknown</value>
               <a:documentation>position of sampled material within original unknown.</a:documentation>
               <value>complete</value>
               <a:documentation>division is not a sample.</a:documentation>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.docStatus.attributes">
      <ref name="tei_att.docStatus.attribute.status"/>
   </define>
   <define name="tei_att.docStatus.attribute.status">
      <optional>
         <attribute xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
                    name="status"
                    a:defaultValue="draft">
            <a:documentation>describes the status of a document either currently or, when associated with a dated element, at the time indicated.
Sample values include: 1] approved; 2] candidate; 3] cleared; 4] deprecated; 5] draft; 6] embargoed; 7] expired; 8] frozen; 9] galley; 10] proposed; 11] published; 12] recommendation; 13] submitted; 14] unfinished; 15] withdrawn</a:documentation>
            <data type="token">
               <param name="pattern">[^\p{C}\p{Z}]+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.responsibility.attributes">
      <ref name="tei_att.global.responsibility.attribute.cert"/>
      <ref name="tei_att.global.responsibility.attribute.resp"/>
   </define>
   <define name="tei_att.global.responsibility.attribute.cert">
      <optional>
         <attribute name="cert">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(certainty) signifies the degree of certainty associated with the intervention or interpretation.</a:documentation>
            <choice>
               <data type="double"/>
               <choice>
                  <value>high</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                  <value>medium</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                  <value>low</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                  <value>unknown</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
               </choice>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.responsibility.attribute.resp">
      <optional>
         <attribute name="resp">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(responsible party) indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.editLike.attributes">
      <ref name="tei_att.editLike.attribute.evidence"/>
      <ref name="tei_att.editLike.attribute.instant"/>
   </define>
   <define name="tei_att.editLike.attribute.evidence">
      <optional>
         <attribute name="evidence">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation.
Suggested values include: 1] internal; 2] external; 3] conjecture</a:documentation>
            <list>
               <oneOrMore>
                  <choice>
                     <value>internal</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">there is internal evidence to support the intervention.</a:documentation>
                     <value>external</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">there is external evidence to support the intervention.</a:documentation>
                     <value>conjecture</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">the intervention or interpretation has been made by the editor, cataloguer, or scholar on the basis of their expertise.</a:documentation>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </choice>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.editLike.attribute.instant">
      <optional>
         <attribute xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
                    name="instant"
                    a:defaultValue="false">
            <a:documentation>indicates whether this is an instant revision or not.</a:documentation>
            <choice>
               <data type="boolean"/>
               <choice>
                  <value>unknown</value>
                  <a:documentation/>
                  <value>inapplicable</value>
                  <a:documentation/>
               </choice>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.rendition.attributes">
      <ref name="tei_att.global.rendition.attribute.rend"/>
      <ref name="tei_att.global.rendition.attribute.style"/>
      <ref name="tei_att.global.rendition.attribute.rendition"/>
   </define>
   <define name="tei_att.global.rendition.attribute.rend">
      <optional>
         <attribute name="rend">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(rendition) indicates how the element in question was rendered or presented in the source text.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.rendition.attribute.style">
      <optional>
         <attribute name="style">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">contains an expression in some formal style definition language which defines the rendering or presentation used for this element in the source text</a:documentation>
            <data type="string"/>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.rendition.attribute.rendition">
      <optional>
         <attribute name="rendition">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">points to a description of the rendering or presentation used for this element in the source text.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.source.attributes">
      <ref name="tei_att.global.source.attribute.source"/>
   </define>
   <define name="tei_att.global.source.attribute.source">
      <optional>
         <attribute name="source">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the source from which some aspect of this element is drawn.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
            id="tei_revue-att.global.source-source-only_1_ODD_source-constraint-rule-4">
      <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                xmlns:xi="http://www.w3.org/2001/XInclude"
                xmlns="http://www.tei-c.org/ns/1.0"
                context="tei:*[@source]">
            <sch:let name="srcs" value="tokenize( normalize-space(@source),' ')"/>
            <sch:report test="( self::tei:classRef               | self::tei:dataRef               | self::tei:elementRef               | self::tei:macroRef               | self::tei:moduleRef               | self::tei:schemaSpec )               and               $srcs[2]">
              When used on a schema description element (like
              <sch:value-of select="name(.)"/>), the @source attribute
              should have only 1 value. (This one has <sch:value-of select="count($srcs)"/>.)
            </sch:report>
          </sch:rule>
   </pattern>
   <define name="tei_att.global.attributes">
      <ref name="tei_att.global.rendition.attributes"/>
      <ref name="tei_att.global.linking.attributes"/>
      <ref name="tei_att.global.facs.attributes"/>
      <ref name="tei_att.global.change.attributes"/>
      <ref name="tei_att.global.responsibility.attributes"/>
      <ref name="tei_att.global.source.attributes"/>
      <ref name="tei_att.global.attribute.xmlid"/>
      <ref name="tei_att.global.attribute.n"/>
      <ref name="tei_att.global.attribute.xmllang"/>
      <ref name="tei_att.global.attribute.xmlbase"/>
      <ref name="tei_att.global.attribute.xmlspace"/>
   </define>
   <define name="tei_att.global.attribute.xmlid">
      <optional>
         <attribute name="xml:id">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(identifier) provides a unique identifier for the element bearing the attribute.</a:documentation>
            <data type="ID"/>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.attribute.n">
      <optional>
         <attribute name="n">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(number) gives a number (or other label) for an element, which is not necessarily unique within the document.</a:documentation>
            <data type="string"/>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.attribute.xmllang">
      <optional>
         <attribute name="xml:lang">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(language) indicates the language of the element content using a tag generated according to <a xmlns="http://www.w3.org/1999/xhtml"
                  href="http://www.rfc-editor.org/rfc/bcp/bcp47.txt">BCP 47</a>.</a:documentation>
            <choice>
               <data type="language"/>
               <choice>
                  <value/>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
               </choice>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.attribute.xmlbase">
      <optional>
         <attribute name="xml:base">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">provides a base URI reference with which applications can resolve relative URI references into absolute URI references.</a:documentation>
            <data type="anyURI">
               <param name="pattern">\S+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.attribute.xmlspace">
      <optional>
         <attribute name="xml:space">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">signals an intention about how white space should be managed by applications.</a:documentation>
            <choice>
               <value>default</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">signals that the application's default white-space processing modes are acceptable</a:documentation>
               <value>preserve</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the intent that applications preserve all white space</a:documentation>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.internetMedia.attributes">
      <ref name="tei_att.internetMedia.attribute.mimeType"/>
   </define>
   <define name="tei_att.internetMedia.attribute.mimeType">
      <optional>
         <attribute name="mimeType">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type</a:documentation>
            <list>
               <oneOrMore>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.media.attributes">
      <ref name="tei_att.internetMedia.attributes"/>
      <ref name="tei_att.media.attribute.width"/>
      <ref name="tei_att.media.attribute.height"/>
      <ref name="tei_att.media.attribute.scale"/>
   </define>
   <define name="tei_att.media.attribute.width">
      <optional>
         <attribute name="width">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">Where the media are displayed, indicates the display width</a:documentation>
            <data type="token">
               <param name="pattern">[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|ch|rem|vw|vh|vmin|vmax)</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.media.attribute.height">
      <optional>
         <attribute name="height">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">Where the media are displayed, indicates the display height</a:documentation>
            <data type="token">
               <param name="pattern">[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|ch|rem|vw|vh|vmin|vmax)</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.media.attribute.scale">
      <optional>
         <attribute name="scale">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">Where the media are displayed, indicates a scale factor to be applied when generating the desired display size</a:documentation>
            <choice>
               <data type="double"/>
               <data type="token">
                  <param name="pattern">(\-?[\d]+/\-?[\d]+)</param>
               </data>
               <data type="decimal"/>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.resourced.attributes">
      <ref name="tei_att.resourced.attribute.url"/>
   </define>
   <define name="tei_att.resourced.attribute.url">
      <attribute name="url">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(uniform resource locator) specifies the URL from which the media concerned may be obtained.</a:documentation>
         <data type="anyURI">
            <param name="pattern">\S+</param>
         </data>
      </attribute>
   </define>
   <define name="tei_att.measurement.attributes">
      <ref name="tei_att.measurement.attribute.unit"/>
      <ref name="tei_att.measurement.attribute.unitRef"/>
      <ref name="tei_att.measurement.attribute.quantity"/>
      <ref name="tei_att.measurement.attribute.commodity"/>
   </define>
   <define name="tei_att.measurement.attribute.unit">
      <optional>
         <attribute name="unit">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(unit) indicates the units used for the measurement, usually using the standard symbol for the desired units.
Suggested values include: 1] m (metre); 2] kg (kilogram); 3] s (second); 4] Hz (hertz); 5] Pa (pascal); 6] Ω (ohm); 7] L (litre); 8] t (tonne); 9] ha (hectare); 10] Å (ångström); 11] mL (millilitre); 12] cm (centimetre); 13] dB (decibel); 14] kbit (kilobit); 15] Kibit (kibibit); 16] kB (kilobyte); 17] KiB (kibibyte); 18] MB (megabyte); 19] MiB (mebibyte)</a:documentation>
            <choice>
               <value>m</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(metre) SI base unit of length</a:documentation>
               <value>kg</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(kilogram) SI base unit of mass</a:documentation>
               <value>s</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(second) SI base unit of time</a:documentation>
               <value>Hz</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(hertz) SI unit of frequency</a:documentation>
               <value>Pa</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(pascal) SI unit of pressure or stress</a:documentation>
               <value>Ω</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(ohm) SI unit of electric resistance</a:documentation>
               <value>L</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(litre) 1 dm³</a:documentation>
               <value>t</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(tonne) 10³ kg</a:documentation>
               <value>ha</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(hectare) 1 hm²</a:documentation>
               <value>Å</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(ångström) 10⁻¹⁰ m</a:documentation>
               <value>mL</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(millilitre) </a:documentation>
               <value>cm</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(centimetre) </a:documentation>
               <value>dB</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(decibel) see remarks, below</a:documentation>
               <value>kbit</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(kilobit) 10³ or 1000 bits</a:documentation>
               <value>Kibit</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(kibibit) 2¹⁰ or 1024 bits</a:documentation>
               <value>kB</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(kilobyte) 10³ or 1000 bytes</a:documentation>
               <value>KiB</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(kibibyte) 2¹⁰ or 1024 bytes</a:documentation>
               <value>MB</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(megabyte) 10⁶ or 1 000 000 bytes</a:documentation>
               <value>MiB</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(mebibyte) 2²⁰ or 1 048 576 bytes</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.measurement.attribute.unitRef">
      <optional>
         <attribute name="unitRef">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">points to a unique identifier stored in the <code xmlns="http://www.w3.org/1999/xhtml">@xml:id</code> of a <code xmlns="http://www.w3.org/1999/xhtml">&lt;unitDef&gt;</code> element that defines a unit of measure.</a:documentation>
            <data type="anyURI">
               <param name="pattern">\S+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.measurement.attribute.quantity">
      <optional>
         <attribute name="quantity">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(quantity) specifies the number of the specified units that comprise the measurement</a:documentation>
            <choice>
               <data type="double"/>
               <data type="token">
                  <param name="pattern">(\-?[\d]+/\-?[\d]+)</param>
               </data>
               <data type="decimal"/>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.measurement.attribute.commodity">
      <optional>
         <attribute name="commodity">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(commodity) indicates the substance that is being measured</a:documentation>
            <list>
               <oneOrMore>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
            id="tei_revue-att.measurement-att-measurement-unitRef-constraint-rule-5">
      <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                xmlns:xi="http://www.w3.org/2001/XInclude"
                xmlns="http://www.tei-c.org/ns/1.0"
                context="tei:*[@unitRef]">
        <sch:report role="info" test="@unit">The @unit attribute may be unnecessary when @unitRef is present.</sch:report>
      </sch:rule>
   </pattern>
   <define name="tei_att.naming.attributes">
      <ref name="tei_att.canonical.attributes"/>
      <ref name="tei_att.naming.attribute.role"/>
      <ref name="tei_att.naming.attribute.nymRef"/>
   </define>
   <define name="tei_att.naming.attribute.role">
      <optional>
         <attribute name="role">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">may be used to specify further information about the entity referenced by this name in the form of a set of whitespace-separated values, for example the occupation of a person, or the status of a place.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.naming.attribute.nymRef">
      <optional>
         <attribute name="nymRef">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(reference to the canonical name) provides a means of locating the canonical form (nym) of the names associated with the object named by the element bearing it.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.notated.attributes">
      <ref name="tei_att.notated.attribute.notation"/>
   </define>
   <define name="tei_att.notated.attribute.notation">
      <optional>
         <attribute name="notation">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">names the notation used for the content of the element.</a:documentation>
            <data type="token">
               <param name="pattern">[^\p{C}\p{Z}]+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.placement.attributes">
      <ref name="tei_att.placement.attribute.place"/>
   </define>
   <define name="tei_att.placement.attribute.place">
      <optional>
         <attribute name="place">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies where this item is placed.
Suggested values include: 1] top; 2] bottom; 3] margin; 4] opposite; 5] overleaf; 6] above; 7] right; 8] below; 9] left; 10] end; 11] inline; 12] inspace</a:documentation>
            <list>
               <oneOrMore>
                  <choice>
                     <value>top</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">at the top of the page</a:documentation>
                     <value>bottom</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">at the foot of the page</a:documentation>
                     <value>margin</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">in the margin (left, right, or both)</a:documentation>
                     <value>opposite</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">on the opposite, i.e. facing, page</a:documentation>
                     <value>overleaf</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">on the other side of the leaf</a:documentation>
                     <value>above</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">above the line</a:documentation>
                     <value>right</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">to the right, e.g. to the right of a vertical line of text, or to the right of a figure</a:documentation>
                     <value>below</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">below the line</a:documentation>
                     <value>left</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">to the left, e.g. to the left of a vertical line of text, or to the left of a figure</a:documentation>
                     <value>end</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">at the end of e.g. chapter or volume.</a:documentation>
                     <value>inline</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">within the body of the text.</a:documentation>
                     <value>inspace</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">in a predefined space, for example left by an earlier scribe.</a:documentation>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </choice>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.typed.attributes">
      <ref name="tei_att.typed.attribute.type"/>
      <ref name="tei_att.typed.attribute.subtype"/>
   </define>
   <define name="tei_att.typed.attribute.type">
      <optional>
         <attribute name="type">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the element in some sense, using any convenient classification scheme or typology.</a:documentation>
            <data type="token">
               <param name="pattern">[^\p{C}\p{Z}]+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.typed.attribute.subtype">
      <optional>
         <attribute name="subtype">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(subtype) provides a sub-categorization of the element, if needed</a:documentation>
            <data type="token">
               <param name="pattern">[^\p{C}\p{Z}]+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
            id="tei_revue-att.typed-subtypeTyped-constraint-rule-6">
      <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                xmlns:xi="http://www.w3.org/2001/XInclude"
                xmlns="http://www.tei-c.org/ns/1.0"
                context="tei:*[@subtype]">
        <sch:assert test="@type">The <sch:name/> element should not be categorized in detail with @subtype unless also categorized in general with @type</sch:assert>
      </sch:rule>
   </pattern>
   <define name="tei_att.pointing.attributes">
      <ref name="tei_att.pointing.attribute.targetLang"/>
      <ref name="tei_att.pointing.attribute.target"/>
      <ref name="tei_att.pointing.attribute.evaluate"/>
   </define>
   <define name="tei_att.pointing.attribute.targetLang">
      <optional>
         <attribute name="targetLang">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the language of the content to be found at the destination referenced by <code xmlns="http://www.w3.org/1999/xhtml">@target</code>, using a language tag generated according to <a xmlns="http://www.w3.org/1999/xhtml"
                  href="http://www.rfc-editor.org/rfc/bcp/bcp47.txt">BCP 47</a>.</a:documentation>
            <choice>
               <data type="language"/>
               <choice>
                  <value/>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
               </choice>
            </choice>
         </attribute>
      </optional>
   </define>
   <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
            id="tei_revue-att.pointing-targetLang-targetLang-constraint-rule-7">
      <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                xmlns:xi="http://www.w3.org/2001/XInclude"
                xmlns="http://www.tei-c.org/ns/1.0"
                context="tei:*[not(self::tei:schemaSpec)][@targetLang]">
            <sch:assert test="@target">@targetLang should only be used on <sch:name/> if @target is specified.</sch:assert>
          </sch:rule>
   </pattern>
   <define name="tei_att.pointing.attribute.target">
      <optional>
         <attribute name="target">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the destination of the reference by supplying one or more URI References</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.pointing.attribute.evaluate">
      <optional>
         <attribute name="evaluate">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(evaluate) specifies the intended meaning when the target of a pointer is itself a pointer.</a:documentation>
            <choice>
               <value>all</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">if the element pointed to is itself a pointer, then the target of that pointer will be taken, and so on, until an element is found which is not a pointer.</a:documentation>
               <value>one</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">if the element pointed to is itself a pointer, then its target (whether a pointer or not) is taken as the target of this pointer.</a:documentation>
               <value>none</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">no further evaluation of targets is carried out beyond that needed to find the element specified in the pointer's target.</a:documentation>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.segLike.attributes">
      <ref name="tei_att.datcat.attributes"/>
      <ref name="tei_att.fragmentable.attributes"/>
      <ref name="tei_att.segLike.attribute.function"/>
   </define>
   <define name="tei_att.segLike.attribute.function">
      <optional>
         <attribute name="function">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(function) characterizes the function of the segment.</a:documentation>
            <data type="token">
               <param name="pattern">[^\p{C}\p{Z}]+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.sortable.attributes">
      <ref name="tei_att.sortable.attribute.sortKey"/>
   </define>
   <define name="tei_att.sortable.attribute.sortKey">
      <optional>
         <attribute name="sortKey">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies the sort key for this element in an index, list or group which contains it.</a:documentation>
            <data type="token">
               <param name="pattern">[^\p{C}\p{Z}]+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.edition.attributes">
      <ref name="tei_att.edition.attribute.ed"/>
      <ref name="tei_att.edition.attribute.edRef"/>
   </define>
   <define name="tei_att.edition.attribute.ed">
      <optional>
         <attribute name="ed">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(edition) supplies a sigil or other arbitrary identifier for the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.edition.attribute.edRef">
      <optional>
         <attribute name="edRef">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(edition reference) provides a pointer to the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.spanning.attributes">
      <ref name="tei_att.spanning.attribute.spanTo"/>
   </define>
   <define name="tei_att.spanning.attribute.spanTo">
      <optional>
         <attribute name="spanTo">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the end of a span initiated by the element bearing this attribute.</a:documentation>
            <data type="anyURI">
               <param name="pattern">\S+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
            id="tei_revue-att.spanning-spanTo-spanTo-points-to-following-constraint-rule-8">
      <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                xmlns:xi="http://www.w3.org/2001/XInclude"
                xmlns="http://www.tei-c.org/ns/1.0"
                context="tei:*[@spanTo]">
            <sch:assert test="id(substring(@spanTo,2)) and following::*[@xml:id=substring(current()/@spanTo,2)]">
The element indicated by @spanTo (<sch:value-of select="@spanTo"/>) must follow the current element <sch:name/>
            </sch:assert>
          </sch:rule>
   </pattern>
   <define name="tei_att.timed.attributes">
      <ref name="tei_att.timed.attribute.start"/>
      <ref name="tei_att.timed.attribute.end"/>
   </define>
   <define name="tei_att.timed.attribute.start">
      <optional>
         <attribute name="start">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the location within a temporal alignment at which this element begins.</a:documentation>
            <data type="anyURI">
               <param name="pattern">\S+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.timed.attribute.end">
      <optional>
         <attribute name="end">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the location within a temporal alignment at which this element ends.</a:documentation>
            <data type="anyURI">
               <param name="pattern">\S+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.transcriptional.attributes">
      <ref name="tei_att.editLike.attributes"/>
      <ref name="tei_att.written.attributes"/>
      <ref name="tei_att.transcriptional.attribute.status"/>
      <ref name="tei_att.transcriptional.attribute.cause"/>
      <ref name="tei_att.transcriptional.attribute.seq"/>
   </define>
   <define name="tei_att.transcriptional.attribute.status">
      <optional>
         <attribute xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
                    name="status"
                    a:defaultValue="unremarkable">
            <a:documentation>indicates the effect of the intervention, for example in the case of a deletion, strikeouts which include too much or too little text, or in the case of an addition, an insertion which duplicates some of the text already present.
Sample values include: 1] duplicate; 2] duplicate-partial; 3] excessStart; 4] excessEnd; 5] shortStart; 6] shortEnd; 7] partial; 8] unremarkable</a:documentation>
            <data type="token">
               <param name="pattern">[^\p{C}\p{Z}]+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.transcriptional.attribute.cause">
      <optional>
         <attribute name="cause">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">documents the presumed cause for the intervention.</a:documentation>
            <data type="token">
               <param name="pattern">[^\p{C}\p{Z}]+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.transcriptional.attribute.seq">
      <optional>
         <attribute name="seq">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(sequence) assigns a sequence number related to the order in which the encoded features carrying this attribute are believed to have occurred.</a:documentation>
            <data type="nonNegativeInteger"/>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.citing.attributes">
      <ref name="tei_att.citing.attribute.unit"/>
      <ref name="tei_att.citing.attribute.from"/>
      <ref name="tei_att.citing.attribute.to"/>
   </define>
   <define name="tei_att.citing.attribute.unit">
      <optional>
         <attribute name="unit">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">identifies the unit of information conveyed by the element, e.g. columns, pages, volume, entry.
Suggested values include: 1] volume (volume); 2] issue; 3] page (page); 4] line; 5] chapter (chapter); 6] part; 7] column; 8] entry</a:documentation>
            <choice>
               <value>volume</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(volume) the element contains a volume number.</a:documentation>
               <value>issue</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">the element contains an issue number, or volume and issue numbers.</a:documentation>
               <value>page</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(page) the element contains a page number or page range.</a:documentation>
               <value>line</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">the element contains a line number or line range.</a:documentation>
               <value>chapter</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(chapter) the element contains a chapter indication (number and/or title)</a:documentation>
               <value>part</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">the element identifies a part of a book or collection.</a:documentation>
               <value>column</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">the element identifies a column.</a:documentation>
               <value>entry</value>
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">the element identifies an entry number or label in a list of entries.</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.citing.attribute.from">
      <optional>
         <attribute name="from">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the starting point of the range of units indicated by the <code xmlns="http://www.w3.org/1999/xhtml">@unit</code> attribute.</a:documentation>
            <data type="token">
               <param name="pattern">[^\p{C}\p{Z}]+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.citing.attribute.to">
      <optional>
         <attribute name="to">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the end-point of the range of units indicated by the <code xmlns="http://www.w3.org/1999/xhtml">@unit</code> attribute.</a:documentation>
            <data type="token">
               <param name="pattern">[^\p{C}\p{Z}]+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_model.nameLike.agent">
      <choice>
         <ref name="tei_name"/>
         <ref name="tei_orgName"/>
         <ref name="tei_persName"/>
      </choice>
   </define>
   <define name="tei_model.nameLike.agent_alternation">
      <choice>
         <ref name="tei_name"/>
         <ref name="tei_orgName"/>
         <ref name="tei_persName"/>
      </choice>
   </define>
   <define name="tei_model.nameLike.agent_sequence">
      <ref name="tei_name"/>
      <ref name="tei_orgName"/>
      <ref name="tei_persName"/>
   </define>
   <define name="tei_model.nameLike.agent_sequenceOptional">
      <optional>
         <ref name="tei_name"/>
      </optional>
      <optional>
         <ref name="tei_orgName"/>
      </optional>
      <optional>
         <ref name="tei_persName"/>
      </optional>
   </define>
   <define name="tei_model.nameLike.agent_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_name"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_orgName"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_persName"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.nameLike.agent_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_name"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_orgName"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_persName"/>
      </oneOrMore>
   </define>
   <define name="tei_model.segLike">
      <choice>
         <ref name="tei_seg"/>
      </choice>
   </define>
   <define name="tei_model.segLike_alternation">
      <choice>
         <ref name="tei_seg"/>
      </choice>
   </define>
   <define name="tei_model.segLike_sequence">
      <ref name="tei_seg"/>
   </define>
   <define name="tei_model.segLike_sequenceOptional">
      <optional>
         <ref name="tei_seg"/>
      </optional>
   </define>
   <define name="tei_model.segLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_seg"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.segLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_seg"/>
      </oneOrMore>
   </define>
   <define name="tei_model.hiLike">
      <choice>
         <ref name="tei_hi"/>
         <ref name="tei_q"/>
      </choice>
   </define>
   <define name="tei_model.hiLike_alternation">
      <choice>
         <ref name="tei_hi"/>
         <ref name="tei_q"/>
      </choice>
   </define>
   <define name="tei_model.hiLike_sequence">
      <ref name="tei_hi"/>
      <ref name="tei_q"/>
   </define>
   <define name="tei_model.hiLike_sequenceOptional">
      <optional>
         <ref name="tei_hi"/>
      </optional>
      <optional>
         <ref name="tei_q"/>
      </optional>
   </define>
   <define name="tei_model.hiLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_hi"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_q"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.hiLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_hi"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_q"/>
      </oneOrMore>
   </define>
   <define name="tei_model.emphLike">
      <choice>
         <ref name="tei_foreign"/>
         <ref name="tei_emph"/>
         <ref name="tei_distinct"/>
         <ref name="tei_mentioned"/>
         <ref name="tei_soCalled"/>
         <ref name="tei_gloss"/>
         <ref name="tei_term"/>
         <ref name="tei_title"/>
      </choice>
   </define>
   <define name="tei_model.emphLike_alternation">
      <choice>
         <ref name="tei_foreign"/>
         <ref name="tei_emph"/>
         <ref name="tei_distinct"/>
         <ref name="tei_mentioned"/>
         <ref name="tei_soCalled"/>
         <ref name="tei_gloss"/>
         <ref name="tei_term"/>
         <ref name="tei_title"/>
      </choice>
   </define>
   <define name="tei_model.emphLike_sequence">
      <ref name="tei_foreign"/>
      <ref name="tei_emph"/>
      <ref name="tei_distinct"/>
      <ref name="tei_mentioned"/>
      <ref name="tei_soCalled"/>
      <ref name="tei_gloss"/>
      <ref name="tei_term"/>
      <ref name="tei_title"/>
   </define>
   <define name="tei_model.emphLike_sequenceOptional">
      <optional>
         <ref name="tei_foreign"/>
      </optional>
      <optional>
         <ref name="tei_emph"/>
      </optional>
      <optional>
         <ref name="tei_distinct"/>
      </optional>
      <optional>
         <ref name="tei_mentioned"/>
      </optional>
      <optional>
         <ref name="tei_soCalled"/>
      </optional>
      <optional>
         <ref name="tei_gloss"/>
      </optional>
      <optional>
         <ref name="tei_term"/>
      </optional>
      <optional>
         <ref name="tei_title"/>
      </optional>
   </define>
   <define name="tei_model.emphLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_foreign"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_emph"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_distinct"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_mentioned"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_soCalled"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_gloss"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_term"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_title"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.emphLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_foreign"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_emph"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_distinct"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_mentioned"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_soCalled"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_gloss"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_term"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_title"/>
      </oneOrMore>
   </define>
   <define name="tei_model.highlighted">
      <choice>
         <ref name="tei_model.hiLike"/>
         <ref name="tei_model.emphLike"/>
      </choice>
   </define>
   <define name="tei_model.highlighted_alternation">
      <choice>
         <ref name="tei_model.hiLike_alternation"/>
         <ref name="tei_model.emphLike_alternation"/>
      </choice>
   </define>
   <define name="tei_model.highlighted_sequence">
      <ref name="tei_model.hiLike_sequence"/>
      <ref name="tei_model.emphLike_sequence"/>
   </define>
   <define name="tei_model.highlighted_sequenceOptional">
      <optional>
         <ref name="tei_model.hiLike_sequenceOptional"/>
      </optional>
      <optional>
         <ref name="tei_model.emphLike_sequenceOptional"/>
      </optional>
   </define>
   <define name="tei_model.highlighted_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_model.hiLike_sequenceOptionalRepeatable"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_model.emphLike_sequenceOptionalRepeatable"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.highlighted_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_model.hiLike_sequenceRepeatable"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_model.emphLike_sequenceRepeatable"/>
      </oneOrMore>
   </define>
   <define name="tei_model.dateLike">
      <choice>
         <ref name="tei_date"/>
         <ref name="tei_time"/>
      </choice>
   </define>
   <define name="tei_model.dateLike_alternation">
      <choice>
         <ref name="tei_date"/>
         <ref name="tei_time"/>
      </choice>
   </define>
   <define name="tei_model.dateLike_sequence">
      <ref name="tei_date"/>
      <ref name="tei_time"/>
   </define>
   <define name="tei_model.dateLike_sequenceOptional">
      <optional>
         <ref name="tei_date"/>
      </optional>
      <optional>
         <ref name="tei_time"/>
      </optional>
   </define>
   <define name="tei_model.dateLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_date"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_time"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.dateLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_date"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_time"/>
      </oneOrMore>
   </define>
   <define name="tei_model.measureLike">
      <choice>
         <ref name="tei_num"/>
         <ref name="tei_measure"/>
         <ref name="tei_measureGrp"/>
         <ref name="tei_unit"/>
         <ref name="tei_geo"/>
      </choice>
   </define>
   <define name="tei_model.measureLike_alternation">
      <choice>
         <ref name="tei_num"/>
         <ref name="tei_measure"/>
         <ref name="tei_measureGrp"/>
         <ref name="tei_unit"/>
         <ref name="tei_geo"/>
      </choice>
   </define>
   <define name="tei_model.measureLike_sequence">
      <ref name="tei_num"/>
      <ref name="tei_measure"/>
      <ref name="tei_measureGrp"/>
      <ref name="tei_unit"/>
      <ref name="tei_geo"/>
   </define>
   <define name="tei_model.measureLike_sequenceOptional">
      <optional>
         <ref name="tei_num"/>
      </optional>
      <optional>
         <ref name="tei_measure"/>
      </optional>
      <optional>
         <ref name="tei_measureGrp"/>
      </optional>
      <optional>
         <ref name="tei_unit"/>
      </optional>
      <optional>
         <ref name="tei_geo"/>
      </optional>
   </define>
   <define name="tei_model.measureLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_num"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_measure"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_measureGrp"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_unit"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_geo"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.measureLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_num"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_measure"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_measureGrp"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_unit"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_geo"/>
      </oneOrMore>
   </define>
   <define name="tei_model.egLike">
      <notAllowed/>
   </define>
   <define name="tei_model.egLike_alternation">
      <notAllowed/>
   </define>
   <define name="tei_model.egLike_sequence">
      <empty/>
   </define>
   <define name="tei_model.egLike_sequenceOptional">
      <empty/>
   </define>
   <define name="tei_model.egLike_sequenceOptionalRepeatable">
      <empty/>
   </define>
   <define name="tei_model.egLike_sequenceRepeatable">
      <notAllowed/>
   </define>
   <define name="tei_model.graphicLike">
      <choice>
         <ref name="tei_media"/>
         <ref name="tei_graphic"/>
         <ref name="tei_binaryObject"/>
      </choice>
   </define>
   <define name="tei_model.graphicLike_alternation">
      <choice>
         <ref name="tei_media"/>
         <ref name="tei_graphic"/>
         <ref name="tei_binaryObject"/>
      </choice>
   </define>
   <define name="tei_model.graphicLike_sequence">
      <ref name="tei_media"/>
      <ref name="tei_graphic"/>
      <ref name="tei_binaryObject"/>
   </define>
   <define name="tei_model.graphicLike_sequenceOptional">
      <optional>
         <ref name="tei_media"/>
      </optional>
      <optional>
         <ref name="tei_graphic"/>
      </optional>
      <optional>
         <ref name="tei_binaryObject"/>
      </optional>
   </define>
   <define name="tei_model.graphicLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_media"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_graphic"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_binaryObject"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.graphicLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_media"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_graphic"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_binaryObject"/>
      </oneOrMore>
   </define>
   <define name="tei_model.offsetLike">
      <choice>
         <ref name="tei_offset"/>
         <ref name="tei_geogFeat"/>
      </choice>
   </define>
   <define name="tei_model.offsetLike_alternation">
      <choice>
         <ref name="tei_offset"/>
         <ref name="tei_geogFeat"/>
      </choice>
   </define>
   <define name="tei_model.offsetLike_sequence">
      <ref name="tei_offset"/>
      <ref name="tei_geogFeat"/>
   </define>
   <define name="tei_model.offsetLike_sequenceOptional">
      <optional>
         <ref name="tei_offset"/>
      </optional>
      <optional>
         <ref name="tei_geogFeat"/>
      </optional>
   </define>
   <define name="tei_model.offsetLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_offset"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_geogFeat"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.offsetLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_offset"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_geogFeat"/>
      </oneOrMore>
   </define>
   <define name="tei_model.pPart.msdesc">
      <notAllowed/>
   </define>
   <define name="tei_model.pPart.msdesc_alternation">
      <notAllowed/>
   </define>
   <define name="tei_model.pPart.msdesc_sequence">
      <empty/>
   </define>
   <define name="tei_model.pPart.msdesc_sequenceOptional">
      <empty/>
   </define>
   <define name="tei_model.pPart.msdesc_sequenceOptionalRepeatable">
      <empty/>
   </define>
   <define name="tei_model.pPart.msdesc_sequenceRepeatable">
      <notAllowed/>
   </define>
   <define name="tei_model.pPart.editorial">
      <choice>
         <ref name="tei_choice"/>
         <ref name="tei_abbr"/>
         <ref name="tei_expan"/>
      </choice>
   </define>
   <define name="tei_model.pPart.editorial_alternation">
      <choice>
         <ref name="tei_choice"/>
         <ref name="tei_abbr"/>
         <ref name="tei_expan"/>
      </choice>
   </define>
   <define name="tei_model.pPart.editorial_sequence">
      <ref name="tei_choice"/>
      <ref name="tei_abbr"/>
      <ref name="tei_expan"/>
   </define>
   <define name="tei_model.pPart.editorial_sequenceOptional">
      <optional>
         <ref name="tei_choice"/>
      </optional>
      <optional>
         <ref name="tei_abbr"/>
      </optional>
      <optional>
         <ref name="tei_expan"/>
      </optional>
   </define>
   <define name="tei_model.pPart.editorial_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_choice"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_abbr"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_expan"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.pPart.editorial_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_choice"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_abbr"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_expan"/>
      </oneOrMore>
   </define>
   <define name="tei_model.pPart.transcriptional">
      <choice>
         <ref name="tei_sic"/>
         <ref name="tei_corr"/>
         <ref name="tei_reg"/>
         <ref name="tei_orig"/>
         <ref name="tei_add"/>
         <ref name="tei_del"/>
         <ref name="tei_unclear"/>
         <ref name="tei_supplied"/>
      </choice>
   </define>
   <define name="tei_model.pPart.transcriptional_alternation">
      <choice>
         <ref name="tei_sic"/>
         <ref name="tei_corr"/>
         <ref name="tei_reg"/>
         <ref name="tei_orig"/>
         <ref name="tei_add"/>
         <ref name="tei_del"/>
         <ref name="tei_unclear"/>
         <ref name="tei_supplied"/>
      </choice>
   </define>
   <define name="tei_model.pPart.transcriptional_sequence">
      <ref name="tei_sic"/>
      <ref name="tei_corr"/>
      <ref name="tei_reg"/>
      <ref name="tei_orig"/>
      <ref name="tei_add"/>
      <ref name="tei_del"/>
      <ref name="tei_unclear"/>
      <ref name="tei_supplied"/>
   </define>
   <define name="tei_model.pPart.transcriptional_sequenceOptional">
      <optional>
         <ref name="tei_sic"/>
      </optional>
      <optional>
         <ref name="tei_corr"/>
      </optional>
      <optional>
         <ref name="tei_reg"/>
      </optional>
      <optional>
         <ref name="tei_orig"/>
      </optional>
      <optional>
         <ref name="tei_add"/>
      </optional>
      <optional>
         <ref name="tei_del"/>
      </optional>
      <optional>
         <ref name="tei_unclear"/>
      </optional>
      <optional>
         <ref name="tei_supplied"/>
      </optional>
   </define>
   <define name="tei_model.pPart.transcriptional_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_sic"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_corr"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_reg"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_orig"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_add"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_del"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_unclear"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_supplied"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.pPart.transcriptional_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_sic"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_corr"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_reg"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_orig"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_add"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_del"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_unclear"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_supplied"/>
      </oneOrMore>
   </define>
   <define name="tei_model.pPart.edit">
      <choice>
         <ref name="tei_model.pPart.editorial"/>
         <ref name="tei_model.pPart.transcriptional"/>
      </choice>
   </define>
   <define name="tei_model.pPart.edit_alternation">
      <choice>
         <ref name="tei_model.pPart.editorial_alternation"/>
         <ref name="tei_model.pPart.transcriptional_alternation"/>
      </choice>
   </define>
   <define name="tei_model.pPart.edit_sequence">
      <ref name="tei_model.pPart.editorial_sequence"/>
      <ref name="tei_model.pPart.transcriptional_sequence"/>
   </define>
   <define name="tei_model.pPart.edit_sequenceOptional">
      <optional>
         <ref name="tei_model.pPart.editorial_sequenceOptional"/>
      </optional>
      <optional>
         <ref name="tei_model.pPart.transcriptional_sequenceOptional"/>
      </optional>
   </define>
   <define name="tei_model.pPart.edit_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_model.pPart.editorial_sequenceOptionalRepeatable"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_model.pPart.transcriptional_sequenceOptionalRepeatable"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.pPart.edit_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_model.pPart.editorial_sequenceRepeatable"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_model.pPart.transcriptional_sequenceRepeatable"/>
      </oneOrMore>
   </define>
   <define name="tei_model.ptrLike">
      <choice>
         <ref name="tei_ptr"/>
         <ref name="tei_ref"/>
      </choice>
   </define>
   <define name="tei_model.ptrLike_alternation">
      <choice>
         <ref name="tei_ptr"/>
         <ref name="tei_ref"/>
      </choice>
   </define>
   <define name="tei_model.ptrLike_sequence">
      <ref name="tei_ptr"/>
      <ref name="tei_ref"/>
   </define>
   <define name="tei_model.ptrLike_sequenceOptional">
      <optional>
         <ref name="tei_ptr"/>
      </optional>
      <optional>
         <ref name="tei_ref"/>
      </optional>
   </define>
   <define name="tei_model.ptrLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_ptr"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_ref"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.ptrLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_ptr"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_ref"/>
      </oneOrMore>
   </define>
   <define name="tei_model.lPart">
      <notAllowed/>
   </define>
   <define name="tei_model.lPart_alternation">
      <notAllowed/>
   </define>
   <define name="tei_model.lPart_sequence">
      <empty/>
   </define>
   <define name="tei_model.lPart_sequenceOptional">
      <empty/>
   </define>
   <define name="tei_model.lPart_sequenceOptionalRepeatable">
      <empty/>
   </define>
   <define name="tei_model.lPart_sequenceRepeatable">
      <notAllowed/>
   </define>
   <define name="tei_model.global.meta">
      <choice>
         <ref name="tei_index"/>
      </choice>
   </define>
   <define name="tei_model.global.meta_alternation">
      <choice>
         <ref name="tei_index"/>
      </choice>
   </define>
   <define name="tei_model.global.meta_sequence">
      <ref name="tei_index"/>
   </define>
   <define name="tei_model.global.meta_sequenceOptional">
      <optional>
         <ref name="tei_index"/>
      </optional>
   </define>
   <define name="tei_model.global.meta_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_index"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.global.meta_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_index"/>
      </oneOrMore>
   </define>
   <define name="tei_model.milestoneLike">
      <choice>
         <ref name="tei_milestone"/>
         <ref name="tei_gb"/>
         <ref name="tei_pb"/>
         <ref name="tei_lb"/>
         <ref name="tei_cb"/>
      </choice>
   </define>
   <define name="tei_model.milestoneLike_alternation">
      <choice>
         <ref name="tei_milestone"/>
         <ref name="tei_gb"/>
         <ref name="tei_pb"/>
         <ref name="tei_lb"/>
         <ref name="tei_cb"/>
      </choice>
   </define>
   <define name="tei_model.milestoneLike_sequence">
      <ref name="tei_milestone"/>
      <ref name="tei_gb"/>
      <ref name="tei_pb"/>
      <ref name="tei_lb"/>
      <ref name="tei_cb"/>
   </define>
   <define name="tei_model.milestoneLike_sequenceOptional">
      <optional>
         <ref name="tei_milestone"/>
      </optional>
      <optional>
         <ref name="tei_gb"/>
      </optional>
      <optional>
         <ref name="tei_pb"/>
      </optional>
      <optional>
         <ref name="tei_lb"/>
      </optional>
      <optional>
         <ref name="tei_cb"/>
      </optional>
   </define>
   <define name="tei_model.milestoneLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_milestone"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_gb"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_pb"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_lb"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_cb"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.milestoneLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_milestone"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_gb"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_pb"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_lb"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_cb"/>
      </oneOrMore>
   </define>
   <define name="tei_model.gLike">
      <notAllowed/>
   </define>
   <define name="tei_model.oddDecl">
      <notAllowed/>
   </define>
   <define name="tei_model.oddDecl_alternation">
      <notAllowed/>
   </define>
   <define name="tei_model.oddDecl_sequence">
      <empty/>
   </define>
   <define name="tei_model.oddDecl_sequenceOptional">
      <empty/>
   </define>
   <define name="tei_model.oddDecl_sequenceOptionalRepeatable">
      <empty/>
   </define>
   <define name="tei_model.oddDecl_sequenceRepeatable">
      <notAllowed/>
   </define>
   <define name="tei_model.phrase.xml">
      <notAllowed/>
   </define>
   <define name="tei_model.phrase.xml_alternation">
      <notAllowed/>
   </define>
   <define name="tei_model.phrase.xml_sequence">
      <empty/>
   </define>
   <define name="tei_model.phrase.xml_sequenceOptional">
      <empty/>
   </define>
   <define name="tei_model.phrase.xml_sequenceOptionalRepeatable">
      <empty/>
   </define>
   <define name="tei_model.phrase.xml_sequenceRepeatable">
      <notAllowed/>
   </define>
   <define name="tei_model.specDescLike">
      <notAllowed/>
   </define>
   <define name="tei_model.specDescLike_alternation">
      <notAllowed/>
   </define>
   <define name="tei_model.specDescLike_sequence">
      <empty/>
   </define>
   <define name="tei_model.specDescLike_sequenceOptional">
      <empty/>
   </define>
   <define name="tei_model.specDescLike_sequenceOptionalRepeatable">
      <empty/>
   </define>
   <define name="tei_model.specDescLike_sequenceRepeatable">
      <notAllowed/>
   </define>
   <define name="tei_model.biblLike">
      <choice>
         <ref name="tei_bibl"/>
         <ref name="tei_biblStruct"/>
         <ref name="tei_listBibl"/>
      </choice>
   </define>
   <define name="tei_model.biblLike_alternation">
      <choice>
         <ref name="tei_bibl"/>
         <ref name="tei_biblStruct"/>
         <ref name="tei_listBibl"/>
      </choice>
   </define>
   <define name="tei_model.biblLike_sequence">
      <ref name="tei_bibl"/>
      <ref name="tei_biblStruct"/>
      <ref name="tei_listBibl"/>
   </define>
   <define name="tei_model.biblLike_sequenceOptional">
      <optional>
         <ref name="tei_bibl"/>
      </optional>
      <optional>
         <ref name="tei_biblStruct"/>
      </optional>
      <optional>
         <ref name="tei_listBibl"/>
      </optional>
   </define>
   <define name="tei_model.biblLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_bibl"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_biblStruct"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_listBibl"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.biblLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_bibl"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_biblStruct"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_listBibl"/>
      </oneOrMore>
   </define>
   <define name="tei_model.headLike">
      <choice>
         <ref name="tei_head"/>
      </choice>
   </define>
   <define name="tei_model.headLike_alternation">
      <choice>
         <ref name="tei_head"/>
      </choice>
   </define>
   <define name="tei_model.headLike_sequence">
      <ref name="tei_head"/>
   </define>
   <define name="tei_model.headLike_sequenceOptional">
      <optional>
         <ref name="tei_head"/>
      </optional>
   </define>
   <define name="tei_model.headLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_head"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.headLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_head"/>
      </oneOrMore>
   </define>
   <define name="tei_model.labelLike">
      <choice>
         <ref name="tei_desc"/>
         <ref name="tei_label"/>
      </choice>
   </define>
   <define name="tei_model.labelLike_alternation">
      <choice>
         <ref name="tei_desc"/>
         <ref name="tei_label"/>
      </choice>
   </define>
   <define name="tei_model.labelLike_sequence">
      <ref name="tei_desc"/>
      <ref name="tei_label"/>
   </define>
   <define name="tei_model.labelLike_sequenceOptional">
      <optional>
         <ref name="tei_desc"/>
      </optional>
      <optional>
         <ref name="tei_label"/>
      </optional>
   </define>
   <define name="tei_model.labelLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_desc"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_label"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.labelLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_desc"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_label"/>
      </oneOrMore>
   </define>
   <define name="tei_model.listLike">
      <choice>
         <ref name="tei_list"/>
         <ref name="tei_listOrg"/>
         <ref name="tei_listEvent"/>
         <ref name="tei_listPerson"/>
         <ref name="tei_listPlace"/>
         <ref name="tei_listRelation"/>
         <ref name="tei_listObject"/>
         <ref name="tei_listNym"/>
         <ref name="tei_table"/>
      </choice>
   </define>
   <define name="tei_model.listLike_alternation">
      <choice>
         <ref name="tei_list"/>
         <ref name="tei_listOrg"/>
         <ref name="tei_listEvent"/>
         <ref name="tei_listPerson"/>
         <ref name="tei_listPlace"/>
         <ref name="tei_listRelation"/>
         <ref name="tei_listObject"/>
         <ref name="tei_listNym"/>
         <ref name="tei_table"/>
      </choice>
   </define>
   <define name="tei_model.listLike_sequence">
      <ref name="tei_list"/>
      <ref name="tei_listOrg"/>
      <ref name="tei_listEvent"/>
      <ref name="tei_listPerson"/>
      <ref name="tei_listPlace"/>
      <ref name="tei_listRelation"/>
      <ref name="tei_listObject"/>
      <ref name="tei_listNym"/>
      <ref name="tei_table"/>
   </define>
   <define name="tei_model.listLike_sequenceOptional">
      <optional>
         <ref name="tei_list"/>
      </optional>
      <optional>
         <ref name="tei_listOrg"/>
      </optional>
      <optional>
         <ref name="tei_listEvent"/>
      </optional>
      <optional>
         <ref name="tei_listPerson"/>
      </optional>
      <optional>
         <ref name="tei_listPlace"/>
      </optional>
      <optional>
         <ref name="tei_listRelation"/>
      </optional>
      <optional>
         <ref name="tei_listObject"/>
      </optional>
      <optional>
         <ref name="tei_listNym"/>
      </optional>
      <optional>
         <ref name="tei_table"/>
      </optional>
   </define>
   <define name="tei_model.listLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_list"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_listOrg"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_listEvent"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_listPerson"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_listPlace"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_listRelation"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_listObject"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_listNym"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_table"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.listLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_list"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_listOrg"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_listEvent"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_listPerson"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_listPlace"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_listRelation"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_listObject"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_listNym"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_table"/>
      </oneOrMore>
   </define>
   <define name="tei_model.noteLike">
      <choice>
         <ref name="tei_note"/>
         <ref name="tei_noteGrp"/>
      </choice>
   </define>
   <define name="tei_model.noteLike_alternation">
      <choice>
         <ref name="tei_note"/>
         <ref name="tei_noteGrp"/>
      </choice>
   </define>
   <define name="tei_model.noteLike_sequence">
      <ref name="tei_note"/>
      <ref name="tei_noteGrp"/>
   </define>
   <define name="tei_model.noteLike_sequenceOptional">
      <optional>
         <ref name="tei_note"/>
      </optional>
      <optional>
         <ref name="tei_noteGrp"/>
      </optional>
   </define>
   <define name="tei_model.noteLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_note"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_noteGrp"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.noteLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_note"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_noteGrp"/>
      </oneOrMore>
   </define>
   <define name="tei_model.lLike">
      <choice>
         <ref name="tei_l"/>
      </choice>
   </define>
   <define name="tei_model.lLike_alternation">
      <choice>
         <ref name="tei_l"/>
      </choice>
   </define>
   <define name="tei_model.lLike_sequence">
      <ref name="tei_l"/>
   </define>
   <define name="tei_model.lLike_sequenceOptional">
      <optional>
         <ref name="tei_l"/>
      </optional>
   </define>
   <define name="tei_model.lLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_l"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.lLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_l"/>
      </oneOrMore>
   </define>
   <define name="tei_model.pLike">
      <choice>
         <ref name="tei_p"/>
      </choice>
   </define>
   <define name="tei_model.pLike_alternation">
      <choice>
         <ref name="tei_p"/>
      </choice>
   </define>
   <define name="tei_model.pLike_sequence">
      <ref name="tei_p"/>
   </define>
   <define name="tei_model.pLike_sequenceOptional">
      <optional>
         <ref name="tei_p"/>
      </optional>
   </define>
   <define name="tei_model.pLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_p"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.pLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_p"/>
      </oneOrMore>
   </define>
   <define name="tei_model.stageLike">
      <choice>
         <ref name="tei_stage"/>
      </choice>
   </define>
   <define name="tei_model.stageLike_alternation">
      <choice>
         <ref name="tei_stage"/>
      </choice>
   </define>
   <define name="tei_model.stageLike_sequence">
      <ref name="tei_stage"/>
   </define>
   <define name="tei_model.stageLike_sequenceOptional">
      <optional>
         <ref name="tei_stage"/>
      </optional>
   </define>
   <define name="tei_model.stageLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_stage"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.stageLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_stage"/>
      </oneOrMore>
   </define>
   <define name="tei_model.entryPart">
      <notAllowed/>
   </define>
   <define name="tei_model.eventLike">
      <choice>
         <ref name="tei_event"/>
         <ref name="tei_listEvent"/>
      </choice>
   </define>
   <define name="tei_model.global.edit">
      <choice>
         <ref name="tei_gap"/>
         <ref name="tei_ellipsis"/>
      </choice>
   </define>
   <define name="tei_model.global.edit_alternation">
      <choice>
         <ref name="tei_gap"/>
         <ref name="tei_ellipsis"/>
      </choice>
   </define>
   <define name="tei_model.global.edit_sequence">
      <ref name="tei_gap"/>
      <ref name="tei_ellipsis"/>
   </define>
   <define name="tei_model.global.edit_sequenceOptional">
      <optional>
         <ref name="tei_gap"/>
      </optional>
      <optional>
         <ref name="tei_ellipsis"/>
      </optional>
   </define>
   <define name="tei_model.global.edit_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_gap"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_ellipsis"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.global.edit_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_gap"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_ellipsis"/>
      </oneOrMore>
   </define>
   <define name="tei_model.divPart">
      <choice>
         <ref name="tei_model.lLike"/>
         <ref name="tei_model.pLike"/>
         <ref name="tei_lg"/>
         <ref name="tei_sp"/>
      </choice>
   </define>
   <define name="tei_model.persStateLike">
      <choice>
         <ref name="tei_persName"/>
         <ref name="tei_affiliation"/>
         <ref name="tei_age"/>
         <ref name="tei_education"/>
         <ref name="tei_faith"/>
         <ref name="tei_floruit"/>
         <ref name="tei_gender"/>
         <ref name="tei_langKnowledge"/>
         <ref name="tei_nationality"/>
         <ref name="tei_occupation"/>
         <ref name="tei_persona"/>
         <ref name="tei_persPronouns"/>
         <ref name="tei_residence"/>
         <ref name="tei_sex"/>
         <ref name="tei_socecStatus"/>
         <ref name="tei_state"/>
         <ref name="tei_trait"/>
      </choice>
   </define>
   <define name="tei_model.personLike">
      <choice>
         <ref name="tei_org"/>
         <ref name="tei_person"/>
         <ref name="tei_personGrp"/>
      </choice>
   </define>
   <define name="tei_model.personPart">
      <choice>
         <ref name="tei_model.biblLike"/>
         <ref name="tei_model.eventLike"/>
         <ref name="tei_model.persStateLike"/>
         <ref name="tei_name"/>
         <ref name="tei_birth"/>
         <ref name="tei_death"/>
      </choice>
   </define>
   <define name="tei_model.placeNamePart">
      <choice>
         <ref name="tei_placeName"/>
         <ref name="tei_bloc"/>
         <ref name="tei_country"/>
         <ref name="tei_region"/>
         <ref name="tei_settlement"/>
         <ref name="tei_district"/>
         <ref name="tei_geogName"/>
      </choice>
   </define>
   <define name="tei_model.placeNamePart_alternation">
      <choice>
         <ref name="tei_placeName"/>
         <ref name="tei_bloc"/>
         <ref name="tei_country"/>
         <ref name="tei_region"/>
         <ref name="tei_settlement"/>
         <ref name="tei_district"/>
         <ref name="tei_geogName"/>
      </choice>
   </define>
   <define name="tei_model.placeNamePart_sequence">
      <ref name="tei_placeName"/>
      <ref name="tei_bloc"/>
      <ref name="tei_country"/>
      <ref name="tei_region"/>
      <ref name="tei_settlement"/>
      <ref name="tei_district"/>
      <ref name="tei_geogName"/>
   </define>
   <define name="tei_model.placeNamePart_sequenceOptional">
      <optional>
         <ref name="tei_placeName"/>
      </optional>
      <optional>
         <ref name="tei_bloc"/>
      </optional>
      <optional>
         <ref name="tei_country"/>
      </optional>
      <optional>
         <ref name="tei_region"/>
      </optional>
      <optional>
         <ref name="tei_settlement"/>
      </optional>
      <optional>
         <ref name="tei_district"/>
      </optional>
      <optional>
         <ref name="tei_geogName"/>
      </optional>
   </define>
   <define name="tei_model.placeNamePart_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_placeName"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_bloc"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_country"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_region"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_settlement"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_district"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_geogName"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.placeNamePart_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_placeName"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_bloc"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_country"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_region"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_settlement"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_district"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_geogName"/>
      </oneOrMore>
   </define>
   <define name="tei_model.placeStateLike">
      <choice>
         <ref name="tei_model.placeNamePart"/>
         <ref name="tei_climate"/>
         <ref name="tei_location"/>
         <ref name="tei_population"/>
         <ref name="tei_state"/>
         <ref name="tei_terrain"/>
         <ref name="tei_trait"/>
      </choice>
   </define>
   <define name="tei_model.placeStateLike_alternation">
      <choice>
         <ref name="tei_model.placeNamePart_alternation"/>
         <ref name="tei_climate"/>
         <ref name="tei_location"/>
         <ref name="tei_population"/>
         <ref name="tei_state"/>
         <ref name="tei_terrain"/>
         <ref name="tei_trait"/>
      </choice>
   </define>
   <define name="tei_model.placeStateLike_sequence">
      <ref name="tei_model.placeNamePart_sequence"/>
      <ref name="tei_climate"/>
      <ref name="tei_location"/>
      <ref name="tei_population"/>
      <ref name="tei_state"/>
      <ref name="tei_terrain"/>
      <ref name="tei_trait"/>
   </define>
   <define name="tei_model.placeStateLike_sequenceOptional">
      <optional>
         <ref name="tei_model.placeNamePart_sequenceOptional"/>
      </optional>
      <optional>
         <ref name="tei_climate"/>
      </optional>
      <optional>
         <ref name="tei_location"/>
      </optional>
      <optional>
         <ref name="tei_population"/>
      </optional>
      <optional>
         <ref name="tei_state"/>
      </optional>
      <optional>
         <ref name="tei_terrain"/>
      </optional>
      <optional>
         <ref name="tei_trait"/>
      </optional>
   </define>
   <define name="tei_model.placeStateLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_model.placeNamePart_sequenceOptionalRepeatable"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_climate"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_location"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_population"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_state"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_terrain"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_trait"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.placeStateLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_model.placeNamePart_sequenceRepeatable"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_climate"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_location"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_population"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_state"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_terrain"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_trait"/>
      </oneOrMore>
   </define>
   <define name="tei_model.orgPart">
      <choice>
         <ref name="tei_model.eventLike"/>
         <ref name="tei_listOrg"/>
         <ref name="tei_listPerson"/>
         <ref name="tei_listPlace"/>
      </choice>
   </define>
   <define name="tei_model.publicationStmtPart.agency">
      <choice>
         <ref name="tei_publisher"/>
      </choice>
   </define>
   <define name="tei_model.publicationStmtPart.detail">
      <choice>
         <ref name="tei_model.ptrLike"/>
         <ref name="tei_address"/>
         <ref name="tei_date"/>
         <ref name="tei_pubPlace"/>
      </choice>
   </define>
   <define name="tei_model.certLike">
      <notAllowed/>
   </define>
   <define name="tei_model.descLike">
      <choice>
         <ref name="tei_desc"/>
      </choice>
   </define>
   <define name="tei_model.quoteLike">
      <choice>
         <ref name="tei_quote"/>
         <ref name="tei_cit"/>
      </choice>
   </define>
   <define name="tei_model.quoteLike_alternation">
      <choice>
         <ref name="tei_quote"/>
         <ref name="tei_cit"/>
      </choice>
   </define>
   <define name="tei_model.quoteLike_sequence">
      <ref name="tei_quote"/>
      <ref name="tei_cit"/>
   </define>
   <define name="tei_model.quoteLike_sequenceOptional">
      <optional>
         <ref name="tei_quote"/>
      </optional>
      <optional>
         <ref name="tei_cit"/>
      </optional>
   </define>
   <define name="tei_model.quoteLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_quote"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_cit"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.quoteLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_quote"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_cit"/>
      </oneOrMore>
   </define>
   <define name="tei_model.attributable">
      <choice>
         <ref name="tei_model.quoteLike"/>
         <ref name="tei_said"/>
         <ref name="tei_floatingText"/>
      </choice>
   </define>
   <define name="tei_model.attributable_alternation">
      <choice>
         <ref name="tei_model.quoteLike_alternation"/>
         <ref name="tei_said"/>
         <ref name="tei_floatingText"/>
      </choice>
   </define>
   <define name="tei_model.attributable_sequence">
      <ref name="tei_model.quoteLike_sequence"/>
      <ref name="tei_said"/>
      <ref name="tei_floatingText"/>
   </define>
   <define name="tei_model.attributable_sequenceOptional">
      <optional>
         <ref name="tei_model.quoteLike_sequenceOptional"/>
      </optional>
      <optional>
         <ref name="tei_said"/>
      </optional>
      <optional>
         <ref name="tei_floatingText"/>
      </optional>
   </define>
   <define name="tei_model.attributable_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_model.quoteLike_sequenceOptionalRepeatable"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_said"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_floatingText"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.attributable_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_model.quoteLike_sequenceRepeatable"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_said"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_floatingText"/>
      </oneOrMore>
   </define>
   <define name="tei_model.respLike">
      <choice>
         <ref name="tei_author"/>
         <ref name="tei_editor"/>
         <ref name="tei_respStmt"/>
         <ref name="tei_meeting"/>
      </choice>
   </define>
   <define name="tei_model.divWrapper">
      <choice>
         <ref name="tei_meeting"/>
         <ref name="tei_byline"/>
         <ref name="tei_dateline"/>
         <ref name="tei_argument"/>
         <ref name="tei_epigraph"/>
         <ref name="tei_salute"/>
         <ref name="tei_docAuthor"/>
         <ref name="tei_docDate"/>
      </choice>
   </define>
   <define name="tei_model.divTopPart">
      <choice>
         <ref name="tei_model.headLike"/>
         <ref name="tei_opener"/>
         <ref name="tei_signed"/>
      </choice>
   </define>
   <define name="tei_model.divTop">
      <choice>
         <ref name="tei_model.divWrapper"/>
         <ref name="tei_model.divTopPart"/>
      </choice>
   </define>
   <define name="tei_model.frontPart.drama">
      <notAllowed/>
   </define>
   <define name="tei_model.pLike.front">
      <choice>
         <ref name="tei_head"/>
         <ref name="tei_byline"/>
         <ref name="tei_dateline"/>
         <ref name="tei_argument"/>
         <ref name="tei_epigraph"/>
         <ref name="tei_docTitle"/>
         <ref name="tei_titlePart"/>
         <ref name="tei_docAuthor"/>
         <ref name="tei_docEdition"/>
         <ref name="tei_docImprint"/>
         <ref name="tei_docDate"/>
      </choice>
   </define>
   <define name="tei_model.divBottomPart">
      <choice>
         <ref name="tei_trailer"/>
         <ref name="tei_closer"/>
         <ref name="tei_signed"/>
         <ref name="tei_postscript"/>
      </choice>
   </define>
   <define name="tei_model.divBottom">
      <choice>
         <ref name="tei_model.divWrapper"/>
         <ref name="tei_model.divBottomPart"/>
      </choice>
   </define>
   <define name="tei_model.titlepagePart">
      <choice>
         <ref name="tei_graphic"/>
         <ref name="tei_binaryObject"/>
         <ref name="tei_byline"/>
         <ref name="tei_argument"/>
         <ref name="tei_epigraph"/>
         <ref name="tei_docTitle"/>
         <ref name="tei_titlePart"/>
         <ref name="tei_docAuthor"/>
         <ref name="tei_imprimatur"/>
         <ref name="tei_docEdition"/>
         <ref name="tei_docImprint"/>
         <ref name="tei_docDate"/>
      </choice>
   </define>
   <define name="tei_model.choicePart">
      <choice>
         <ref name="tei_sic"/>
         <ref name="tei_corr"/>
         <ref name="tei_reg"/>
         <ref name="tei_orig"/>
         <ref name="tei_unclear"/>
         <ref name="tei_abbr"/>
         <ref name="tei_expan"/>
         <ref name="tei_seg"/>
         <ref name="tei_supplied"/>
      </choice>
   </define>
   <define name="tei_model.imprintPart">
      <choice>
         <ref name="tei_publisher"/>
         <ref name="tei_biblScope"/>
         <ref name="tei_pubPlace"/>
      </choice>
   </define>
   <define name="tei_model.addressLike">
      <choice>
         <ref name="tei_email"/>
         <ref name="tei_address"/>
         <ref name="tei_affiliation"/>
      </choice>
   </define>
   <define name="tei_model.addressLike_alternation">
      <choice>
         <ref name="tei_email"/>
         <ref name="tei_address"/>
         <ref name="tei_affiliation"/>
      </choice>
   </define>
   <define name="tei_model.addressLike_sequence">
      <ref name="tei_email"/>
      <ref name="tei_address"/>
      <ref name="tei_affiliation"/>
   </define>
   <define name="tei_model.addressLike_sequenceOptional">
      <optional>
         <ref name="tei_email"/>
      </optional>
      <optional>
         <ref name="tei_address"/>
      </optional>
      <optional>
         <ref name="tei_affiliation"/>
      </optional>
   </define>
   <define name="tei_model.addressLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_email"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_address"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_affiliation"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.addressLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_email"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_address"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_affiliation"/>
      </oneOrMore>
   </define>
   <define name="tei_model.nameLike">
      <choice>
         <ref name="tei_model.nameLike.agent"/>
         <ref name="tei_model.offsetLike"/>
         <ref name="tei_model.placeStateLike"/>
         <ref name="tei_rs"/>
         <ref name="tei_model.persNamePart"/>
         <ref name="tei_eventName"/>
         <ref name="tei_objectName"/>
      </choice>
   </define>
   <define name="tei_model.nameLike_alternation">
      <choice>
         <ref name="tei_model.nameLike.agent_alternation"/>
         <ref name="tei_model.offsetLike_alternation"/>
         <ref name="tei_model.placeStateLike_alternation"/>
         <ref name="tei_rs"/>
         <ref name="tei_model.persNamePart_alternation"/>
         <ref name="tei_eventName"/>
         <ref name="tei_objectName"/>
      </choice>
   </define>
   <define name="tei_model.nameLike_sequence">
      <ref name="tei_model.nameLike.agent_sequence"/>
      <ref name="tei_model.offsetLike_sequence"/>
      <ref name="tei_model.placeStateLike_sequence"/>
      <ref name="tei_rs"/>
      <ref name="tei_model.persNamePart_sequence"/>
      <ref name="tei_eventName"/>
      <ref name="tei_objectName"/>
   </define>
   <define name="tei_model.nameLike_sequenceOptional">
      <optional>
         <ref name="tei_model.nameLike.agent_sequenceOptional"/>
      </optional>
      <optional>
         <ref name="tei_model.offsetLike_sequenceOptional"/>
      </optional>
      <optional>
         <ref name="tei_model.placeStateLike_sequenceOptional"/>
      </optional>
      <optional>
         <ref name="tei_rs"/>
      </optional>
      <optional>
         <ref name="tei_model.persNamePart_sequenceOptional"/>
      </optional>
      <optional>
         <ref name="tei_eventName"/>
      </optional>
      <optional>
         <ref name="tei_objectName"/>
      </optional>
   </define>
   <define name="tei_model.nameLike_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_model.nameLike.agent_sequenceOptionalRepeatable"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_model.offsetLike_sequenceOptionalRepeatable"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_model.placeStateLike_sequenceOptionalRepeatable"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_rs"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_model.persNamePart_sequenceOptionalRepeatable"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_eventName"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_objectName"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.nameLike_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_model.nameLike.agent_sequenceRepeatable"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_model.offsetLike_sequenceRepeatable"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_model.placeStateLike_sequenceRepeatable"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_rs"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_model.persNamePart_sequenceRepeatable"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_eventName"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_objectName"/>
      </oneOrMore>
   </define>
   <define name="tei_model.global">
      <choice>
         <ref name="tei_model.global.meta"/>
         <ref name="tei_model.milestoneLike"/>
         <ref name="tei_model.noteLike"/>
         <ref name="tei_model.global.edit"/>
         <ref name="tei_figure"/>
      </choice>
   </define>
   <define name="tei_model.biblPart">
      <choice>
         <ref name="tei_model.respLike"/>
         <ref name="tei_model.imprintPart"/>
         <ref name="tei_series"/>
         <ref name="tei_citedRange"/>
         <ref name="tei_bibl"/>
         <ref name="tei_relatedItem"/>
         <ref name="tei_textLang"/>
         <ref name="tei_listRelation"/>
         <ref name="tei_objectIdentifier"/>
      </choice>
   </define>
   <define name="tei_model.frontPart">
      <choice>
         <ref name="tei_model.frontPart.drama"/>
         <ref name="tei_listBibl"/>
         <ref name="tei_titlePage"/>
      </choice>
   </define>
   <define name="tei_model.addrPart">
      <choice>
         <ref name="tei_model.nameLike"/>
         <ref name="tei_addrLine"/>
         <ref name="tei_street"/>
         <ref name="tei_postCode"/>
         <ref name="tei_postBox"/>
      </choice>
   </define>
   <define name="tei_model.pPart.data">
      <choice>
         <ref name="tei_model.dateLike"/>
         <ref name="tei_model.measureLike"/>
         <ref name="tei_model.addressLike"/>
         <ref name="tei_model.nameLike"/>
      </choice>
   </define>
   <define name="tei_model.pPart.data_alternation">
      <choice>
         <ref name="tei_model.dateLike_alternation"/>
         <ref name="tei_model.measureLike_alternation"/>
         <ref name="tei_model.addressLike_alternation"/>
         <ref name="tei_model.nameLike_alternation"/>
      </choice>
   </define>
   <define name="tei_model.pPart.data_sequence">
      <ref name="tei_model.dateLike_sequence"/>
      <ref name="tei_model.measureLike_sequence"/>
      <ref name="tei_model.addressLike_sequence"/>
      <ref name="tei_model.nameLike_sequence"/>
   </define>
   <define name="tei_model.pPart.data_sequenceOptional">
      <optional>
         <ref name="tei_model.dateLike_sequenceOptional"/>
      </optional>
      <optional>
         <ref name="tei_model.measureLike_sequenceOptional"/>
      </optional>
      <optional>
         <ref name="tei_model.addressLike_sequenceOptional"/>
      </optional>
      <optional>
         <ref name="tei_model.nameLike_sequenceOptional"/>
      </optional>
   </define>
   <define name="tei_model.pPart.data_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_model.dateLike_sequenceOptionalRepeatable"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_model.measureLike_sequenceOptionalRepeatable"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_model.addressLike_sequenceOptionalRepeatable"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_model.nameLike_sequenceOptionalRepeatable"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.pPart.data_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_model.dateLike_sequenceRepeatable"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_model.measureLike_sequenceRepeatable"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_model.addressLike_sequenceRepeatable"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_model.nameLike_sequenceRepeatable"/>
      </oneOrMore>
   </define>
   <define name="tei_model.inter">
      <choice>
         <ref name="tei_model.egLike"/>
         <ref name="tei_model.oddDecl"/>
         <ref name="tei_model.biblLike"/>
         <ref name="tei_model.labelLike"/>
         <ref name="tei_model.listLike"/>
         <ref name="tei_model.stageLike"/>
         <ref name="tei_model.attributable"/>
      </choice>
   </define>
   <define name="tei_model.common">
      <choice>
         <ref name="tei_model.divPart"/>
         <ref name="tei_model.inter"/>
         <ref name="tei_q"/>
      </choice>
   </define>
   <define name="tei_model.phrase">
      <choice>
         <ref name="tei_model.segLike"/>
         <ref name="tei_model.highlighted"/>
         <ref name="tei_model.graphicLike"/>
         <ref name="tei_model.pPart.msdesc"/>
         <ref name="tei_model.pPart.edit"/>
         <ref name="tei_model.ptrLike"/>
         <ref name="tei_model.lPart"/>
         <ref name="tei_model.phrase.xml"/>
         <ref name="tei_model.specDescLike"/>
         <ref name="tei_model.pPart.data"/>
         <ref name="tei_ruby"/>
      </choice>
   </define>
   <define name="tei_model.paraPart">
      <choice>
         <ref name="tei_model.gLike"/>
         <ref name="tei_model.lLike"/>
         <ref name="tei_model.global"/>
         <ref name="tei_model.inter"/>
         <ref name="tei_model.phrase"/>
         <ref name="tei_lg"/>
      </choice>
   </define>
   <define name="tei_model.limitedPhrase">
      <choice>
         <ref name="tei_model.hiLike"/>
         <ref name="tei_model.emphLike"/>
         <ref name="tei_model.pPart.msdesc"/>
         <ref name="tei_model.pPart.editorial"/>
         <ref name="tei_model.ptrLike"/>
         <ref name="tei_model.phrase.xml"/>
         <ref name="tei_model.pPart.data"/>
      </choice>
   </define>
   <define name="tei_model.divLike">
      <choice>
         <ref name="tei_div"/>
      </choice>
   </define>
   <define name="tei_model.divGenLike">
      <notAllowed/>
   </define>
   <define name="tei_model.div1Like">
      <notAllowed/>
   </define>
   <define name="tei_model.annotationLike">
      <choice>
         <ref name="tei_note"/>
      </choice>
   </define>
   <define name="tei_model.teiHeaderPart">
      <notAllowed/>
   </define>
   <define name="tei_model.sourceDescPart">
      <notAllowed/>
   </define>
   <define name="tei_model.standOffPart">
      <choice>
         <ref name="tei_model.global.meta"/>
         <ref name="tei_model.biblLike"/>
         <ref name="tei_model.listLike"/>
         <ref name="tei_model.annotationLike"/>
         <ref name="tei_seg"/>
      </choice>
   </define>
   <define name="tei_att.locatable.attributes">
      <ref name="tei_att.locatable.attribute.where"/>
   </define>
   <define name="tei_att.locatable.attribute.where">
      <optional>
         <attribute name="where">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more locations by pointing to a <code xmlns="http://www.w3.org/1999/xhtml">&lt;place&gt;</code> element or other canonical description.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_model.resource">
      <choice>
         <ref name="tei_text"/>
         <ref name="tei_standOff"/>
      </choice>
   </define>
   <define name="tei_model.describedResource">
      <choice>
         <ref name="tei_teiCorpus"/>
         <ref name="tei_TEI"/>
      </choice>
   </define>
   <define name="tei_model.objectLike">
      <choice>
         <ref name="tei_object"/>
         <ref name="tei_listObject"/>
      </choice>
   </define>
   <define name="tei_att.personal.attributes">
      <ref name="tei_att.naming.attributes"/>
      <ref name="tei_att.personal.attribute.full"/>
      <ref name="tei_att.personal.attribute.sort"/>
   </define>
   <define name="tei_att.personal.attribute.full">
      <optional>
         <attribute xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
                    name="full"
                    a:defaultValue="yes">
            <a:documentation>indicates whether the name component is given in full, as an abbreviation or simply as an initial.</a:documentation>
            <choice>
               <value>yes</value>
               <a:documentation>(yes) the name component is spelled out in full.</a:documentation>
               <value>abb</value>
               <a:documentation>(abbreviated) the name component is given in an abbreviated form.</a:documentation>
               <value>init</value>
               <a:documentation>(initial letter) the name component is indicated only by one initial.</a:documentation>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.personal.attribute.sort">
      <optional>
         <attribute name="sort">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(sort) specifies the sort order of the name component in relation to others within the name.</a:documentation>
            <data type="nonNegativeInteger"/>
         </attribute>
      </optional>
   </define>
   <define name="tei_model.placeLike">
      <choice>
         <ref name="tei_place"/>
      </choice>
   </define>
   <define name="tei_att.calendarSystem.attributes">
      <ref name="tei_att.calendarSystem.attribute.calendar"/>
   </define>
   <define name="tei_att.calendarSystem.attribute.calendar">
      <optional>
         <attribute name="calendar">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
            id="tei_revue-att.calendarSystem-calendar-calendar-constraint-rule-9">
      <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                xmlns:xi="http://www.w3.org/2001/XInclude"
                xmlns="http://www.tei-c.org/ns/1.0"
                context="tei:*[@calendar]">
            <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
              systems or calendars to which the date represented by the content of this element belongs,
              but this <sch:name/> element has no textual content.</sch:assert>
          </sch:rule>
   </pattern>
   <define name="tei_att.milestoneUnit.attributes">
      <ref name="tei_att.milestoneUnit.attribute.unit"/>
   </define>
   <define name="tei_att.milestoneUnit.attribute.unit">
      <attribute name="unit">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">provides a conventional name for the kind of section changing at this milestone.
Suggested values include: 1] page; 2] column; 3] line; 4] book; 5] poem; 6] canto; 7] speaker; 8] stanza; 9] act; 10] scene; 11] section; 12] absent; 13] unnumbered</a:documentation>
         <choice>
            <value>page</value>
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">physical page breaks (synonymous with the <code xmlns="http://www.w3.org/1999/xhtml">&lt;pb&gt;</code> element).</a:documentation>
            <value>column</value>
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">column breaks.</a:documentation>
            <value>line</value>
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">line breaks (synonymous with the <code xmlns="http://www.w3.org/1999/xhtml">&lt;lb&gt;</code> element).</a:documentation>
            <value>book</value>
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">any units termed book, liber, etc.</a:documentation>
            <value>poem</value>
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">individual poems in a collection.</a:documentation>
            <value>canto</value>
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">cantos or other major sections of a poem.</a:documentation>
            <value>speaker</value>
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">changes of speaker or narrator.</a:documentation>
            <value>stanza</value>
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">stanzas within a poem, book, or canto.</a:documentation>
            <value>act</value>
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">acts within a play.</a:documentation>
            <value>scene</value>
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">scenes within a play or act.</a:documentation>
            <value>section</value>
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">sections of any kind.</a:documentation>
            <value>absent</value>
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">passages not present in the reference edition.</a:documentation>
            <value>unnumbered</value>
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">passages present in the text, but not to be included as part of the reference.</a:documentation>
            <data type="token">
               <param name="pattern">[^\p{C}\p{Z}]+</param>
            </data>
         </choice>
      </attribute>
   </define>
   <define name="tei_p">
      <element name="p">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(paragraph) marks paragraphs in prose. [3.1. Paragraphs 7.2.5. Speech Contents]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-p-abstractModel-structure-p-in-ab-or-p-constraint-report-6">
            <rule context="tei:p">
               <sch:report xmlns:rng="http://relaxng.org/ns/structure/1.0"
                           xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                           xmlns="http://www.tei-c.org/ns/1.0"
                           test="(ancestor::tei:ab or ancestor::tei:p) and not( ancestor::tei:floatingText |parent::tei:exemplum |parent::tei:item |parent::tei:note |parent::tei:q |parent::tei:quote |parent::tei:remarks |parent::tei:said |parent::tei:sp |parent::tei:stage |parent::tei:cell |parent::tei:figure )">
        Abstract model violation: Paragraphs may not occur inside other paragraphs or ab elements.
      </sch:report>
            </rule>
         </pattern>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-p-abstractModel-structure-p-in-l-or-lg-constraint-report-7">
            <rule context="tei:p">
               <sch:report xmlns:rng="http://relaxng.org/ns/structure/1.0"
                           xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                           xmlns="http://www.tei-c.org/ns/1.0"
                           test="(ancestor::tei:l or ancestor::tei:lg) and not( ancestor::tei:floatingText |parent::tei:figure |parent::tei:note )">
        Abstract model violation: Lines may not contain higher-level structural elements such as div, p, or ab, unless p is a child of figure or note, or is a descendant of floatingText.
      </sch:report>
            </rule>
         </pattern>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <ref name="tei_att.fragmentable.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_foreign">
      <element name="foreign">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(foreign) identifies a word or phrase as belonging to some language other than that of the surrounding text. [3.3.2.1. Foreign Words or Expressions]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_emph">
      <element name="emph">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(emphasized) marks words or phrases which are stressed or emphasized for linguistic or rhetorical effect. [3.3.2.2. Emphatic Words and Phrases 3.3.2. Emphasis, Foreign Words, and Unusual Language]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_hi">
      <element name="hi">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(highlighted) marks a word or phrase as graphically distinct from the surrounding text, for reasons concerning which no claim is made. [3.3.2.2. Emphatic Words and Phrases 3.3.2. Emphasis, Foreign Words, and Unusual Language]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_distinct">
      <element name="distinct">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">identifies any word or phrase which is regarded as linguistically distinct, for example as archaic, technical, dialectal, non-preferred, etc., or as forming part of a sublanguage. [3.3.2.3. Other Linguistically Distinct Material]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the sublanguage or register to which the word or phrase is being assigned</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="time">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies how the phrase is distinct diachronically</a:documentation>
               <data type="string"/>
            </attribute>
         </optional>
         <optional>
            <attribute name="space">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies how the phrase is distinct diatopically</a:documentation>
               <data type="string"/>
            </attribute>
         </optional>
         <optional>
            <attribute name="social">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies how the phrase is distinct diastratically</a:documentation>
               <data type="string"/>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_said">
      <element name="said">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(speech or thought) indicates passages thought or spoken aloud, whether explicitly indicated in the source or not, whether directly or indirectly reported, whether by real people or fictional characters. [3.3.3. Quotation]</a:documentation>
         <ref name="tei_macro.specialPara"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.ascribed.directed.attributes"/>
         <optional>
            <attribute name="aloud">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">may be used to indicate whether the quoted matter is regarded as having been vocalized or signed.</a:documentation>
               <choice>
                  <data type="boolean"/>
                  <choice>
                     <value>unknown</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                     <value>inapplicable</value>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                  </choice>
               </choice>
            </attribute>
         </optional>
         <optional>
            <attribute xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
                       name="direct"
                       a:defaultValue="true">
               <a:documentation>may be used to indicate whether the quoted matter is regarded as direct or indirect speech.</a:documentation>
               <choice>
                  <data type="boolean"/>
                  <choice>
                     <value>unknown</value>
                     <a:documentation/>
                     <value>inapplicable</value>
                     <a:documentation/>
                  </choice>
               </choice>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_quote">
      <element name="quote">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(quotation) contains a phrase or passage attributed by the narrator or author to some agency external to the text. [3.3.3. Quotation 4.3.1. Grouped Texts]</a:documentation>
         <ref name="tei_macro.specialPara"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.notated.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_q">
      <element name="q">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(quoted) contains material which is distinguished from the surrounding text using quotation marks or a similar method, for any one of a variety of reasons including, but not limited to: direct speech or thought, technical terms or jargon, authorial distance, quotations from elsewhere, and passages that are mentioned but not used. [3.3.3. Quotation]</a:documentation>
         <ref name="tei_macro.specialPara"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.ascribed.directed.attributes"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(type) may be used to indicate whether the offset passage is spoken or thought, or to characterize it more finely.
Suggested values include: 1] spoken (spoken); 2] thought (thought); 3] written (written); 4] soCalled (so called); 5] foreign (foreign); 6] distinct (distinct); 7] term; 8] emph (emph); 9] mentioned (mentioned)</a:documentation>
               <choice>
                  <value>spoken</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(spoken) representation of speech</a:documentation>
                  <value>thought</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(thought) representation of thought, e.g. internal monologue</a:documentation>
                  <value>written</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(written) quotation from a written source</a:documentation>
                  <value>soCalled</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(so called) authorial distance</a:documentation>
                  <value>foreign</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(foreign) foreign words</a:documentation>
                  <value>distinct</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(distinct) linguistically distinct</a:documentation>
                  <value>term</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">technical term</a:documentation>
                  <value>emph</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(emph) rhetorically emphasized</a:documentation>
                  <value>mentioned</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(mentioned) refering to itself, not its normal referent</a:documentation>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </choice>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_cit">
      <element name="cit">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(cited quotation) contains a quotation from some other document, together with a bibliographic reference to its source. In a dictionary it may contain an example text with at least one occurrence of the word form, used in the sense being described, or a translation of the headword, or an example. [3.3.3. Quotation 4.3.1. Grouped Texts 9.3.5.1. Examples]</a:documentation>
         <oneOrMore>
            <choice>
               <ref name="tei_model.biblLike"/>
               <ref name="tei_model.egLike"/>
               <ref name="tei_model.entryPart"/>
               <ref name="tei_model.global"/>
               <ref name="tei_model.graphicLike"/>
               <ref name="tei_model.ptrLike"/>
               <ref name="tei_model.attributable"/>
        
               <ref name="tei_q"/>
            </choice>
         </oneOrMore>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_mentioned">
      <element name="mentioned">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">marks words or phrases mentioned, not used. [3.3.3. Quotation]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_soCalled">
      <element name="soCalled">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(so called) contains a word or phrase for which the author or narrator indicates a disclaiming of responsibility, for example by the use of scare quotes or italics. [3.3.3. Quotation]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_desc">
      <element name="desc">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(description) contains a short description of the purpose, function, or use of its parent element, or when the parent is a documentation element, describes or defines the object being documented.  [22.4.1. Description of Components]</a:documentation>
         <ref name="tei_macro.limitedContent"/>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-desc-deprecationInfo-only-in-deprecated-constraint-rule-10">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:desc[ @type eq 'deprecationInfo']">
               <sch:assert test="../@validUntil">Information about a
        deprecation should only be present in a specification element
        that is being deprecated: that is, only an element that has a
        @validUntil attribute should have a child &lt;desc
        type="deprecationInfo"&gt;.</sch:assert>
            </sch:rule>
         </pattern>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the element in some sense, using any convenient classification scheme or typology.
Suggested values include: 1] deprecationInfo (deprecation information)</a:documentation>
               <choice>
                  <value>deprecationInfo</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(deprecation
          information) This element describes why or how its parent element is being deprecated, typically including recommendations for alternate encoding.</a:documentation>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </choice>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_gloss">
      <element name="gloss">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(gloss) identifies a phrase or word used to provide a gloss or definition for some other word or phrase. [3.4.1. Terms and Glosses 22.4.1. Description of Components]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.pointing.attributes"/>
         <ref name="tei_att.cReferencing.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_term">
      <element name="term">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(term) contains a single-word, multi-word, or symbolic designation which is regarded as a technical term. [3.4.1. Terms and Glosses]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <ref name="tei_att.pointing.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.canonical.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <ref name="tei_att.cReferencing.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_ruby">
      <element name="ruby">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(ruby container) contains a passage of base text along with its associated ruby gloss(es). [3.4.2. Ruby Annotations]</a:documentation>
         <group>
            <ref name="tei_rb"/>
            <oneOrMore>
               <ref name="tei_rt"/>
            </oneOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_rb">
      <element name="rb">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(ruby base) contains the base text annotated by a ruby gloss. [3.4.2. Ruby Annotations]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_rt">
      <element name="rt">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(ruby text) contains a ruby text, an annotation closely associated with a passage of the main text. [3.4.2. Ruby Annotations]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.placement.attributes"/>
         <ref name="tei_att.transcriptional.attributes"/>
         <optional>
            <attribute name="target">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies a pointer to the base being glossed by this ruby text.</a:documentation>
               <data type="anyURI">
                  <param name="pattern">\S+</param>
               </data>
            </attribute>
         </optional> 
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-rt-target-rt-target-not-span-constraint-report-8">
            <rule context="tei:rt/@target">
               <sch:report xmlns:rng="http://relaxng.org/ns/structure/1.0"
                           xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                           xmlns="http://www.tei-c.org/ns/1.0"
                           test="../@from | ../@to">When target= is
            present, neither from= nor to= should be.</sch:report>
            </rule>
         </pattern>
         <optional>
            <attribute name="from">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">points to the starting point of the span of text being glossed by this ruby text.</a:documentation>
               <data type="anyURI">
                  <param name="pattern">\S+</param>
               </data>
            </attribute>
         </optional> 
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-rt-from-rt-from-constraint-assert-6">
            <rule context="tei:rt/@from">
               <sch:assert xmlns:rng="http://relaxng.org/ns/structure/1.0"
                           xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                           xmlns="http://www.tei-c.org/ns/1.0"
                           test="../@to">When from= is present, the to=
            attribute of <sch:name/> is required.</sch:assert>
            </rule>
         </pattern>
         <optional>
            <attribute name="to">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">points to the ending point of the span of text being glossed.</a:documentation>
               <data type="anyURI">
                  <param name="pattern">\S+</param>
               </data>
            </attribute>
         </optional> 
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-rt-to-rt-to-constraint-assert-7">
            <rule context="tei:rt/@to">
               <sch:assert xmlns:rng="http://relaxng.org/ns/structure/1.0"
                           xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                           xmlns="http://www.tei-c.org/ns/1.0"
                           test="../@from">When to= is present, the from=
            attribute of <sch:name/> is required.</sch:assert>
            </rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_sic">
      <element name="sic">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(Latin for thus or so) contains text reproduced although apparently incorrect or inaccurate. [3.5.1. Apparent Errors]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_corr">
      <element name="corr">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(correction) contains the correct form of a passage apparently erroneous in the copy text. [3.5.1. Apparent Errors]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_choice">
      <element name="choice">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(choice) groups a number of alternative encodings for the same point in a text. [3.5. Simple Editorial Changes]</a:documentation>
         <oneOrMore>
            <choice>
               <ref name="tei_model.choicePart"/>
               <ref name="tei_choice"/>
            </choice>
         </oneOrMore>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_reg">
      <element name="reg">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(regularization) contains a reading which has been regularized or normalized in some sense. [3.5.2. Regularization and
Normalization 12. Critical Apparatus]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_orig">
      <element name="orig">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(original form) contains a reading which is marked as following the original, rather than being normalized or corrected. [3.5.2. Regularization and
Normalization 12. Critical Apparatus]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_gap">
      <element name="gap">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(gap) indicates a point where material has been omitted in a transcription, whether for editorial reasons described in the TEI header, as part of sampling practice, or because the material is illegible, invisible, or inaudible. [3.5.3. Additions, Deletions, and Omissions]</a:documentation>
         <zeroOrMore>
            <choice>
               <ref name="tei_model.descLike"/>
               <ref name="tei_model.certLike"/>
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.timed.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <optional>
            <attribute name="reason">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(reason) gives the reason for omission</a:documentation>
               <list>
                  <oneOrMore>
                     <choice>
                        <value>cancelled</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(cancelled) </a:documentation>
                        <value>deleted</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(deleted) </a:documentation>
                        <value>editorial</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(editorial) for features omitted from transcription due to editorial policy</a:documentation>
                        <value>illegible</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(illegible) </a:documentation>
                        <value>inaudible</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(inaudible) </a:documentation>
                        <value>irrelevant</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(irrelevant) </a:documentation>
                        <value>sampling</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(sampling) </a:documentation>
                        <value>accidental</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                     </choice>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <optional>
            <attribute name="agent">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(agent) in the case of text omitted because of damage, categorizes the cause of the damage, if it can be identified.
Sample values include: 1] rubbing (rubbing); 2] mildew (mildew); 3] smoke (smoke)</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_ellipsis">
      <element name="ellipsis">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(deliberately marked omission) indicates a purposeful marking in the source document signalling that content has been omitted, and may also supply or describe the omitted content. [3.5.3. Additions, Deletions, and Omissions]</a:documentation>
         <group>
      
            <optional>
               <ref name="tei_model.descLike"/>
            </optional>
            <optional>
               <ref name="tei_supplied"/>
            </optional>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <ref name="tei_att.timed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_add">
      <element name="add">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(addition) contains letters, words, or phrases inserted in the source text by an author, scribe, or a previous annotator or corrector. [3.5.3. Additions, Deletions, and Omissions]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.transcriptional.attributes"/>
         <ref name="tei_att.placement.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_del">
      <element name="del">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(deletion) contains a letter, word, or passage deleted, marked as deleted, or otherwise indicated as superfluous or spurious in the copy text by an author, scribe, or a previous annotator or corrector. [3.5.3. Additions, Deletions, and Omissions]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.transcriptional.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_unclear">
      <element name="unclear">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(unclear) contains a word, phrase, or passage which cannot be transcribed with certainty because it is illegible or inaudible in the source. [11.3.3.1. Damage, Illegibility, and Supplied Text 3.5.3. Additions, Deletions, and Omissions]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <optional>
            <attribute name="reason">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates why the material is hard to transcribe.
Suggested values include: 1] illegible (illegible); 2] inaudible (inaudible); 3] faded (faded); 4] background_noise (background noise); 5] eccentric_ductus (eccentric ductus)</a:documentation>
               <list>
                  <oneOrMore>
                     <choice>
                        <value>illegible</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(illegible) </a:documentation>
                        <value>inaudible</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(inaudible) </a:documentation>
                        <value>faded</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(faded) </a:documentation>
                        <value>background_noise</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(background noise) </a:documentation>
                        <value>eccentric_ductus</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(eccentric ductus) indicates illegibility due to an unusual, awkward, or incompetent execution of a glyph or glyphs </a:documentation>
                        <data type="token">
                           <param name="pattern">[^\p{C}\p{Z}]+</param>
                        </data>
                     </choice>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <optional>
            <attribute name="agent">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">Where the difficulty in transcription arises from damage, categorizes the cause of the damage, if it can be identified.
Sample values include: 1] rubbing; 2] mildew; 3] smoke</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_name">
      <element name="name">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(name, proper noun) contains a proper noun or noun phrase. [3.6.1. Referring Strings]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.personal.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-name-calendar-calendar-check-name-constraint-rule-11">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_rs">
      <element name="rs">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(referencing string) contains a general purpose name or referring string. [13.2.1. Personal Names 3.6.1. Referring Strings]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.naming.attribute.role"/>
         <ref name="tei_att.naming.attribute.nymRef"/>
         <ref name="tei_att.canonical.attribute.key"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="ref">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(reference) provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the element in some sense, using any convenient classification scheme or typology.</a:documentation>
               <choice>
                  <value>affaire</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                  <value>event</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
               </choice>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_email">
      <element name="email">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(electronic mail address) contains an email address identifying a location to which email messages can be delivered. [3.6.2. Addresses]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_address">
      <element name="address">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(address) contains a postal address, for example of a publisher, an organization, or an individual. [3.6.2. Addresses 2.2.4. Publication, Distribution, Licensing, etc. 3.12.2.4. Imprint, Size of a Document, and Reprint Information]</a:documentation>
         <group>
      
            <zeroOrMore>
               <ref name="tei_model.global"/>
            </zeroOrMore>
      
            <oneOrMore>
               <group>
        
                  <ref name="tei_model.addrPart"/>
        
        
                  <zeroOrMore>
                     <ref name="tei_model.global"/>
                  </zeroOrMore>
        
               </group>
            </oneOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_addrLine">
      <element name="addrLine">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(address line) contains one line of a postal address. [3.6.2. Addresses 2.2.4. Publication, Distribution, Licensing, etc. 3.12.2.4. Imprint, Size of a Document, and Reprint Information]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_street">
      <element name="street">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">contains a full street address including any name or number identifying a building as well as the name of the street or route on which it is located. [3.6.2. Addresses]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_postCode">
      <element name="postCode">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(postal code) contains a numerical or alphanumeric code used as part of a postal address to simplify sorting or delivery of mail. [3.6.2. Addresses]</a:documentation>
         <text/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_postBox">
      <element name="postBox">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(postal box or post office box) contains a number or other identifier for some postal delivery point other than a street address. [3.6.2. Addresses]</a:documentation>
         <text/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_num">
      <element name="num">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(number) contains a number, written in any form. [3.6.3. Numbers and
Measures]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <ref name="tei_att.ranging.attributes"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the type of numeric value.
Suggested values include: 1] cardinal; 2] ordinal; 3] fraction; 4] percentage</a:documentation>
               <choice>
                  <value>cardinal</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">absolute number, e.g. 21, 21.5</a:documentation>
                  <value>ordinal</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">ordinal number, e.g. 21st</a:documentation>
                  <value>fraction</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">fraction, e.g. one half or three-quarters</a:documentation>
                  <value>percentage</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">a percentage</a:documentation>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </choice>
            </attribute>
         </optional>
         <optional>
            <attribute name="value">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies the value of the number in standard form.</a:documentation>
               <choice>
                  <data type="double"/>
                  <data type="token">
                     <param name="pattern">(\-?[\d]+/\-?[\d]+)</param>
                  </data>
                  <data type="decimal"/>
               </choice>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_measure">
      <element name="measure">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(measure) contains a word or phrase referring to some quantity of an object or commodity, usually comprising a number, a unit, and a commodity name. [3.6.3. Numbers and
Measures]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <ref name="tei_att.measurement.attributes"/>
         <ref name="tei_att.ranging.attributes"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the type of measurement in any convenient typology.</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_measureGrp">
      <element name="measureGrp">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(measure group) contains a group of dimensional specifications which relate to the same object, for example the height and width of a manuscript page. [10.3.4. Dimensions]</a:documentation>
         <zeroOrMore>
            <choice>
               <text/>
               <ref name="tei_model.gLike"/>
               <ref name="tei_model.measureLike"/>
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.measurement.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_unit">
      <element name="unit">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">contains a symbol, a word or a phrase referring to a unit of measurement in any kind of formal or informal system. [3.6.3. Numbers and
Measures]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.measurement.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_date">
      <element name="date">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(date) contains a date in any format. [3.6.4. Dates and Times 2.2.4. Publication, Distribution, Licensing, etc. 2.6. The Revision Description 3.12.2.4. Imprint, Size of a Document, and Reprint Information 15.2.3. The Setting Description 13.4. Dates]</a:documentation>
         <zeroOrMore>
            <choice>
               <text/>
               <ref name="tei_model.gLike"/>
               <ref name="tei_model.phrase"/>
               <ref name="tei_model.global"/>
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.canonical.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.calendarSystem.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_time">
      <element name="time">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(time) contains a phrase defining a time of day in any format. [3.6.4. Dates and Times]</a:documentation>
         <zeroOrMore>
            <choice>
               <text/>
               <ref name="tei_model.gLike"/>
               <ref name="tei_model.phrase"/>
               <ref name="tei_model.global"/>
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.calendarSystem.attributes"/>
         <ref name="tei_att.canonical.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_abbr">
      <element name="abbr">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(abbreviation) contains an abbreviation of any sort. [3.6.5. Abbreviations and Their Expansions]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(type) allows the encoder to classify the abbreviation according to some convenient typology.
Sample values include: 1] suspension (suspension); 2] contraction (contraction); 3] brevigraph; 4] superscription (superscription); 5] acronym (acronym); 6] title (title); 7] organization (organization); 8] geographic (geographic)</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_expan">
      <element name="expan">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(expansion) contains the expansion of an abbreviation. [3.6.5. Abbreviations and Their Expansions]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_ptr">
      <element name="ptr">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(pointer) defines a pointer to another location. [3.7. Simple Links and Cross-References 16.1. Links]</a:documentation>
         <empty/>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-ptr-ptrAtts-constraint-report-9">
            <rule context="tei:ptr">
               <report xmlns:rng="http://relaxng.org/ns/structure/1.0" test="@target and @cRef">Only one of the
attributes @target and @cRef may be supplied on <name/>.</report>
            </rule>
         </pattern>
         <ref name="tei_att.cReferencing.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.internetMedia.attributes"/>
         <ref name="tei_att.pointing.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_ref">
      <element name="ref">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(reference) defines a reference to another location, possibly modified by additional text or comment. [3.7. Simple Links and Cross-References 16.1. Links]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-ref-refAtts-constraint-report-10">
            <rule context="tei:ref">
               <report xmlns:rng="http://relaxng.org/ns/structure/1.0" test="@target and @cRef">Only one of the
	attributes @target' and @cRef' may be supplied on <name/>
               </report>
            </rule>
         </pattern>
         <ref name="tei_att.cReferencing.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.internetMedia.attributes"/>
         <ref name="tei_att.pointing.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_list">
      <element name="list">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(list) contains any sequence of items organized as a list. [3.8. Lists]</a:documentation>
         <group>
      
            <zeroOrMore>
               <choice>
          
                  <ref name="tei_model.divTop"/>
                  <ref name="tei_model.global"/>
                  <zeroOrMore>
                     <ref name="tei_desc"/>
                  </zeroOrMore>          
               </choice>
            </zeroOrMore>
      
            <choice>
               <oneOrMore>
                  <group>
                     <ref name="tei_item"/>
          
                     <zeroOrMore>
                        <ref name="tei_model.global"/>
                     </zeroOrMore>
          
                  </group>
               </oneOrMore>
               <group>
          
                  <optional>
                     <ref name="tei_headLabel"/>
                  </optional>
          
          
                  <optional>
                     <ref name="tei_headItem"/>
                  </optional>
          
                  <oneOrMore>
                     <group>
                        <ref name="tei_label"/>
            
                        <zeroOrMore>
                           <ref name="tei_model.global"/>
                        </zeroOrMore>
            
                        <ref name="tei_item"/>
            
                        <zeroOrMore>
                           <ref name="tei_model.global"/>
                        </zeroOrMore>
            
                     </group>
                  </oneOrMore>
               </group>
            </choice>
      
            <zeroOrMore>
               <group>
          
                  <ref name="tei_model.divBottom"/>
          
          
                  <zeroOrMore>
                     <ref name="tei_model.global"/>
                  </zeroOrMore>
          
               </group>
            </zeroOrMore>
      
         </group>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-list-gloss-list-must-have-labels-constraint-rule-12">
            <sch:rule xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:list[@type='gloss']">
	              <sch:assert test="tei:label">The content of a "gloss" list should include a sequence of one or more pairs of a label element followed by an item element</sch:assert>
            </sch:rule>
         </pattern>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(type) describes the nature of the items in the list.
Suggested values include: 1] gloss (gloss); 2] index (index); 3] instructions (instructions); 4] litany (litany); 5] syllogism (syllogism)</a:documentation>
               <choice>
                  <value>gloss</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(gloss) each list item glosses some term or concept, which is given by a <code xmlns="http://www.w3.org/1999/xhtml">&lt;label&gt;</code> element preceding the list item.</a:documentation>
                  <value>index</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(index) each list item is an entry in an index such as the alphabetical topical index at the back of a print volume.</a:documentation>
                  <value>instructions</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(instructions) each list item is a step in a sequence of instructions, as in a recipe.</a:documentation>
                  <value>litany</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(litany) each list item is one of a sequence of petitions, supplications or invocations, typically in a religious ritual.</a:documentation>
                  <value>syllogism</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(syllogism) each list item is part of an argument consisting of two or more propositions and a final conclusion derived from them.</a:documentation>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </choice>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_item">
      <element name="item">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(item) contains one component of a list. [3.8. Lists 2.6. The Revision Description]</a:documentation>
         <ref name="tei_macro.specialPara"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_label">
      <element name="label">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(label) contains any label or heading used to identify part of a text, typically but not exclusively in a list or glossary. [3.8. Lists]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.placement.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_head">
      <element name="head">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(heading) contains any type of heading, for example the title of a section, or the heading of a list, glossary, manuscript description, etc. [4.2.1. Headings and Trailers]</a:documentation>
         <zeroOrMore>
            <choice>
               <text/>
               <ref name="tei_lg"/>
               <ref name="tei_model.gLike"/>
               <ref name="tei_model.phrase"/>
               <ref name="tei_model.inter"/>
               <ref name="tei_model.lLike"/>
               <ref name="tei_model.global"/>
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.placement.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_headLabel">
      <element name="headLabel">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(heading for list labels) contains the heading for the label or term column in a glossary list or similar structured list. [3.8. Lists]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_headItem">
      <element name="headItem">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(heading for list items) contains the heading for the item or gloss column in a glossary list or similar structured list. [3.8. Lists]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_note">
      <element name="note">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(note) contains a note or annotation. [3.9.1. Notes and Simple Annotation 2.2.6. The Notes Statement 3.12.2.8. Notes and Statement of Language 9.3.5.4. Notes within Entries]</a:documentation>
         <ref name="tei_macro.specialPara"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.placement.attributes"/>
         <ref name="tei_att.pointing.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <ref name="tei_att.anchoring.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_noteGrp">
      <element name="noteGrp">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(note group) contains a group of notes [3.9.1.1. Encoding Grouped Notes]</a:documentation>
         <group>
            <zeroOrMore>
               <ref name="tei_desc"/>
            </zeroOrMore>
            <oneOrMore>
               <choice>
                  <ref name="tei_note"/>
                  <ref name="tei_noteGrp"/>
               </choice>
            </oneOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.placement.attributes"/>
         <ref name="tei_att.pointing.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <ref name="tei_att.anchoring.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_index">
      <element name="index">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(index entry) marks a location to be indexed for whatever purpose. [3.9.2. Index Entries]</a:documentation>
         <zeroOrMore>
            <group>
               <ref name="tei_term"/>
        
               <optional>
                  <ref name="tei_index"/>
               </optional>
        
            </group>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.spanning.attributes"/>
         <optional>
            <attribute name="indexName">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">a single word which follows the rules defining a legal XML name (see ), supplying a name to specify which index (of several) the index entry belongs to.</a:documentation>
               <data type="Name"/>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_media">
      <element name="media">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the location of any form of external media such as an audio or video clip etc. [3.10. Graphics and Other Non-textual Components]</a:documentation>
         <zeroOrMore>
            <ref name="tei_model.descLike"/>
         </zeroOrMore>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.media.attribute.width"/>
         <ref name="tei_att.media.attribute.height"/>
         <ref name="tei_att.media.attribute.scale"/>
         <ref name="tei_att.resourced.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <ref name="tei_att.timed.attributes"/>
         <attribute name="mimeType">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type</a:documentation>
            <list>
               <oneOrMore>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
         <empty/>
      </element>
   </define>
   <define name="tei_graphic">
      <element name="graphic">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(graphic) indicates the location of a graphic or illustration, either forming part of a text, or providing an image of it. [3.10. Graphics and Other Non-textual Components 11.1. Digital Facsimiles]</a:documentation>
         <zeroOrMore>
            <ref name="tei_model.descLike"/>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.media.attributes"/>
         <ref name="tei_att.resourced.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_binaryObject">
      <element name="binaryObject">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">provides encoded binary data representing an inline graphic, audio, video or other object. [3.10. Graphics and Other Non-textual Components]</a:documentation>
         <text/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.media.attributes"/>
         <ref name="tei_att.timed.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="encoding">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">The encoding used to encode the binary data. If not specified, this is assumed to be <a xmlns="http://www.w3.org/1999/xhtml"
                     href="http://en.wikipedia.org/wiki/Base64">Base64</a>.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_milestone">
      <element name="milestone">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(milestone) marks a boundary point separating any kind of section of a text, typically but not necessarily indicating a point at which some part of a standard reference system changes, where the change is not represented by a structural element. [3.11.3. Milestone
Elements]</a:documentation>
         <empty/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.milestoneUnit.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.edition.attributes"/>
         <ref name="tei_att.spanning.attributes"/>
         <ref name="tei_att.breaking.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_gb">
      <element name="gb">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(gathering beginning) marks the beginning of a new gathering or quire in a transcribed codex. [3.11.3. Milestone
Elements]</a:documentation>
         <empty/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.spanning.attributes"/>
         <ref name="tei_att.breaking.attributes"/>
         <ref name="tei_att.edition.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_pb">
      <element name="pb">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(page beginning) marks the beginning of a new page in a paginated document. [3.11.3. Milestone
Elements]</a:documentation>
         <empty/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.edition.attributes"/>
         <ref name="tei_att.spanning.attributes"/>
         <ref name="tei_att.breaking.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_lb">
      <element name="lb">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(line beginning) marks the beginning of a new (typographic) line in some edition or version of a text. [3.11.3. Milestone
Elements 7.2.5. Speech Contents]</a:documentation>
         <empty/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.edition.attributes"/>
         <ref name="tei_att.spanning.attributes"/>
         <ref name="tei_att.breaking.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_cb">
      <element name="cb">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(column beginning) marks the beginning of a new column of a text on a multi-column page. [3.11.3. Milestone
Elements]</a:documentation>
         <empty/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.edition.attributes"/>
         <ref name="tei_att.spanning.attributes"/>
         <ref name="tei_att.breaking.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_analytic">
      <element name="analytic">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(analytic level) contains bibliographic elements describing an item (e.g. an article or poem) published within a monograph or journal and not as an independent publication. [3.12.2.1. Analytic, Monographic, and Series Levels]</a:documentation>
         <zeroOrMore>
            <choice>
               <ref name="tei_author"/>
               <ref name="tei_editor"/>
               <ref name="tei_respStmt"/>
               <ref name="tei_title"/>
               <ref name="tei_model.ptrLike"/>
               <ref name="tei_date"/>
               <ref name="tei_textLang"/>
        
        
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_monogr">
      <element name="monogr">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(monographic level) contains bibliographic elements describing an item (e.g. a book or journal) published as an independent item (i.e. as a separate physical object). [3.12.2.1. Analytic, Monographic, and Series Levels]</a:documentation>
         <group>
      
            <optional>
               <choice>
                  <group>
                     <choice>
                        <ref name="tei_author"/>
                        <ref name="tei_editor"/>
                        <ref name="tei_meeting"/>
                        <ref name="tei_respStmt"/>
                     </choice>
            
                     <zeroOrMore>
                        <choice>
                           <ref name="tei_author"/>
                           <ref name="tei_editor"/>
                           <ref name="tei_meeting"/>
                           <ref name="tei_respStmt"/>
                        </choice>
                     </zeroOrMore>
            
            
                     <oneOrMore>
                        <ref name="tei_title"/>
                     </oneOrMore>
            
            
                     <zeroOrMore>
                        <choice>
                           <ref name="tei_model.ptrLike"/>
                
                           <ref name="tei_textLang"/>
                           <ref name="tei_editor"/>
                           <ref name="tei_respStmt"/>
                        </choice>
                     </zeroOrMore>
            
                  </group>
                  <group>
            
                     <oneOrMore>
                        <choice>
                           <ref name="tei_title"/>
                           <ref name="tei_model.ptrLike"/>
                
                        </choice>
                     </oneOrMore>
            
            
                     <zeroOrMore>
                        <choice>
                           <ref name="tei_textLang"/>
                           <ref name="tei_author"/>
                           <ref name="tei_editor"/>
                           <ref name="tei_meeting"/>
                           <ref name="tei_respStmt"/>
                        </choice>
                     </zeroOrMore>
            
                  </group>
                  <empty/>
               </choice>
            </optional>
      
      
        
      
      
            <zeroOrMore>
               <ref name="tei_model.noteLike"/>
            </zeroOrMore>
      
      
        
        
            <zeroOrMore>
               <choice>
            
                  <ref name="tei_model.ptrLike"/>
                  <ref name="tei_editor"/>
            
            
                  <ref name="tei_respStmt"/>
               </choice>
            </zeroOrMore>
        
      
            <ref name="tei_imprint"/>
      
            <zeroOrMore>
               <choice>
                  <ref name="tei_imprint"/>
          
                  <ref name="tei_biblScope"/>
               </choice>
            </zeroOrMore>
      
         </group>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_series">
      <element name="series">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(series information) contains information about the series in which a book or other bibliographic item has appeared. [3.12.2.1. Analytic, Monographic, and Series Levels]</a:documentation>
         <zeroOrMore>
            <choice>
               <text/>
               <ref name="tei_model.gLike"/>
               <ref name="tei_title"/>
               <ref name="tei_model.ptrLike"/>
               <ref name="tei_editor"/>
               <ref name="tei_respStmt"/>
               <ref name="tei_biblScope"/>
        
               <ref name="tei_textLang"/>
               <ref name="tei_model.global"/>
        
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_author">
      <element name="author">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(author) in a bibliographic reference, contains the name(s) of an author, personal or corporate, of a work; for example in the same form as that provided by a recognized bibliographic name authority. [3.12.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-author-calendar-calendar-check-author-constraint-rule-13">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_editor">
      <element name="editor">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">contains a secondary statement of responsibility for a bibliographic item, for example the name of an individual, institution or organization, (or of several such) acting as editor, compiler, translator, etc. [3.12.2.2. Titles, Authors, and Editors]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-editor-calendar-calendar-check-editor-constraint-rule-14">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_respStmt">
      <element name="respStmt">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(statement of responsibility) supplies a statement of responsibility for the intellectual content of a text, edition, recording, or series, where the specialized elements for authors, editors, etc. do not suffice or do not apply. May also be used to encode information about individuals or organizations which have played a role in the production or distribution of a bibliographic work. [3.12.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement 2.2.2. The Edition Statement 2.2.5. The Series Statement]</a:documentation>
         <group>
            <choice>
               <group>
          
                  <oneOrMore>
                     <ref name="tei_resp"/>
                  </oneOrMore>
          
          
                  <oneOrMore>
                     <ref name="tei_model.nameLike.agent"/>
                  </oneOrMore>
          
               </group>
               <group>
          
                  <oneOrMore>
                     <ref name="tei_model.nameLike.agent"/>
                  </oneOrMore>
          
          
                  <oneOrMore>
                     <ref name="tei_resp"/>
                  </oneOrMore>
          
               </group>
            </choice>
            <zeroOrMore>
               <ref name="tei_note"/>
            </zeroOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.canonical.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_resp">
      <element name="resp">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(responsibility) contains a phrase describing the nature of a person's intellectual responsibility, or an organization's role in the production or distribution of a work. [3.12.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement 2.2.2. The Edition Statement 2.2.5. The Series Statement]</a:documentation>
         <ref name="tei_macro.phraseSeq.limited"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.canonical.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-resp-calendar-calendar-check-resp-constraint-rule-15">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_title">
      <element name="title">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(title) contains a title for any kind of work. [3.12.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement 2.2.5. The Series Statement]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-title-calendar-check-title-constraint-rule-16">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <ref name="tei_att.canonical.attribute.key"/>
         <ref name="tei_att.datable.attributes"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">classifies the title according to some convenient typology.
Sample values include: 1] main; 2] sub (subordinate); 3] alt (alternate); 4] short; 5] desc (descriptive)</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="ref">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(reference) provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs.</a:documentation>
               <list>
                  <oneOrMore>
                     <choice>
                        <value>#C30</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#DDH</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CN</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CM</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#AE</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#RdC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LT</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Abol</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JdH</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#RC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MU</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                     </choice>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-title-calendar-calendar-check-title-constraint-rule-17">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <optional>
            <attribute name="level">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the bibliographic level for a title, that is, whether it identifies an article, book, journal, series, or unpublished material.</a:documentation>
               <choice>
                  <value>a</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(analytic) the title applies to an analytic item, such as an article, poem, or other work published as part of a larger item.</a:documentation>
                  <value>m</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(monographic) the title applies to a monograph such as a book or other item considered to be a distinct publication, including single volumes of multi-volume works</a:documentation>
                  <value>j</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(journal) the title applies to any serial or periodical publication such as a journal, magazine, or newspaper</a:documentation>
                  <value>s</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(series) the title applies to a series of otherwise distinct publications such as a collection</a:documentation>
                  <value>u</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(unpublished) the title applies to any unpublished material (including theses and dissertations unless published by a commercial press)</a:documentation>
               </choice>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_meeting">
      <element name="meeting">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">contains the formalized descriptive title for a meeting or conference, for use in a bibliographic description for an item derived from such a meeting, or as a heading or preamble to publications emanating from it. [3.12.2.2. Titles, Authors, and Editors]</a:documentation>
         <ref name="tei_macro.limitedContent"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.canonical.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-meeting-calendar-calendar-check-meeting-constraint-rule-18">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_imprint">
      <element name="imprint">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">groups information relating to the publication or distribution of a bibliographic item. [3.12.2.4. Imprint, Size of a Document, and Reprint Information]</a:documentation>
         <group>
      
            <zeroOrMore>
               <empty/>
            </zeroOrMore>
      
            <oneOrMore>
               <group>
                  <choice>
          
            
                     <ref name="tei_model.imprintPart"/>
          
          
            
                     <ref name="tei_model.dateLike"/>
          
                  </choice>
        
                  <zeroOrMore>
                     <ref name="tei_respStmt"/>
                  </zeroOrMore>
        
        
                  <zeroOrMore>
                     <ref name="tei_model.global"/>
                  </zeroOrMore>
        
               </group>
            </oneOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_publisher">
      <element name="publisher">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(publisher) provides the name of the organization responsible for the publication or distribution of a bibliographic item. [3.12.2.4. Imprint, Size of a Document, and Reprint Information 2.2.4. Publication, Distribution, Licensing, etc.]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.canonical.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_biblScope">
      <element name="biblScope">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(scope of bibliographic reference) defines the scope of a bibliographic reference, for example as a list of page numbers, or a named subdivision of a larger work. [3.12.2.5. Scopes and Ranges in Bibliographic Citations]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.citing.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_citedRange">
      <element name="citedRange">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(cited range) defines the range of cited content, often represented by pages or other units [3.12.2.5. Scopes and Ranges in Bibliographic Citations]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.pointing.attributes"/>
         <ref name="tei_att.citing.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_pubPlace">
      <element name="pubPlace">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(publication place) contains the name of the place where a bibliographic item was published. [3.12.2.4. Imprint, Size of a Document, and Reprint Information]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_bibl">
      <element name="bibl">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(bibliographic citation) contains a loosely-structured bibliographic citation of which the sub-components may or may not be explicitly tagged. [3.12.1. Methods of Encoding Bibliographic References and Lists of References 2.2.7. The Source Description 15.3.2. Declarable Elements]</a:documentation>
         <zeroOrMore>
            <choice>
               <text/>
               <ref name="tei_model.gLike"/>
               <ref name="tei_model.highlighted"/>
               <ref name="tei_model.pPart.data"/>
               <ref name="tei_model.pPart.edit"/>
               <ref name="tei_model.segLike"/>
               <ref name="tei_model.ptrLike"/>
               <ref name="tei_model.biblPart"/>
               <ref name="tei_model.global"/>
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.declarable.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <ref name="tei_att.sortable.attributes"/>
         <ref name="tei_att.docStatus.attributes"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the element in some sense, using any convenient classification scheme or typology.</a:documentation>
               <choice>
                  <value>monogr</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                  <value>periodical</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                  <value>legal</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
               </choice>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_biblStruct">
      <element name="biblStruct">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(structured bibliographic citation) contains a structured bibliographic citation, in which only bibliographic sub-elements appear and in a specified order. [3.12.1. Methods of Encoding Bibliographic References and Lists of References 2.2.7. The Source Description 15.3.2. Declarable Elements]</a:documentation>
         <group>
            <zeroOrMore>
               <ref name="tei_analytic"/>
            </zeroOrMore>      
            <oneOrMore>
               <group>
                  <ref name="tei_monogr"/>
                  <zeroOrMore>
                     <ref name="tei_series"/>
                  </zeroOrMore>
               </group>
            </oneOrMore>
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.noteLike"/>
                  <ref name="tei_model.ptrLike"/>
                  <ref name="tei_relatedItem"/>
                  <ref name="tei_citedRange"/>
               </choice>
            </zeroOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.declarable.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <ref name="tei_att.docStatus.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_listBibl">
      <element name="listBibl">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(citation list) contains a list of bibliographic citations of any kind. [3.12.1. Methods of Encoding Bibliographic References and Lists of References 2.2.7. The Source Description 15.3.2. Declarable Elements]</a:documentation>
         <group>
            <zeroOrMore>
               <ref name="tei_model.headLike"/>
            </zeroOrMore>
            <zeroOrMore>
               <ref name="tei_desc"/>
            </zeroOrMore>
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.milestoneLike"/>
                  <ref name="tei_relation"/>
                  <ref name="tei_listRelation"/>
               </choice>
            </zeroOrMore>
            <oneOrMore>
               <group>
                  <oneOrMore>
                     <ref name="tei_model.biblLike"/>
                  </oneOrMore>
                  <zeroOrMore>
                     <choice>
                        <ref name="tei_model.milestoneLike"/>
                        <ref name="tei_relation"/>
                        <ref name="tei_listRelation"/>
                     </choice>
                  </zeroOrMore>
               </group>
            </oneOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <ref name="tei_att.declarable.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_relatedItem">
      <element name="relatedItem">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">contains or references some other bibliographic item which is related to the present one in some specified manner, for example as a constituent or alternative version of it. [3.12.2.7. Related Items]</a:documentation>
         <optional>
            <choice>
               <ref name="tei_model.biblLike"/>
               <ref name="tei_model.ptrLike"/>
            </choice>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-relatedItem-targetorcontent1-constraint-report-11">
            <rule context="tei:relatedItem">
               <sch:report xmlns:rng="http://relaxng.org/ns/structure/1.0"
                           xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                           xmlns="http://www.tei-c.org/ns/1.0"
                           test="@target and count( child::* ) &gt; 0">
If the @target attribute on <sch:name/> is used, the
relatedItem element must be empty</sch:report>
               <sch:assert xmlns:rng="http://relaxng.org/ns/structure/1.0"
                           xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                           xmlns="http://www.tei-c.org/ns/1.0"
                           test="@target or child::*">A relatedItem element should have either a 'target' attribute
        or a child element to indicate the related bibliographic item</sch:assert>
            </rule>
         </pattern>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="target">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">points to the related bibliographic element by means of an absolute or relative URI reference</a:documentation>
               <data type="anyURI">
                  <param name="pattern">\S+</param>
               </data>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_l">
      <element name="l">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(verse line) contains a single, possibly incomplete, line of verse. [3.13.1. Core Tags for Verse 3.13. Passages of Verse or Drama 7.2.5. Speech Contents]</a:documentation>
         <zeroOrMore>
            <choice>
               <text/>
               <ref name="tei_model.gLike"/>
               <ref name="tei_model.phrase"/>
               <ref name="tei_model.inter"/>
               <ref name="tei_model.global"/>
            </choice>
         </zeroOrMore>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-l-abstractModel-structure-l-in-l-constraint-report-12">
            <rule context="tei:l">
               <sch:report xmlns:rng="http://relaxng.org/ns/structure/1.0"
                           xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                           xmlns="http://www.tei-c.org/ns/1.0"
                           test="ancestor::tei:l[not(.//tei:note//tei:l[. = current()])]">
        Abstract model violation: Lines may not contain lines or lg elements.
      </sch:report>
            </rule>
         </pattern>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.fragmentable.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_lg">
      <element name="lg">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(line group) contains one or more verse lines functioning as a formal unit, e.g. a stanza, refrain, verse paragraph, etc. [3.13.1. Core Tags for Verse 3.13. Passages of Verse or Drama 7.2.5. Speech Contents]</a:documentation>
         <group>
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.divTop"/>
                  <ref name="tei_model.global"/>
               </choice>
            </zeroOrMore>      
            <choice>
               <ref name="tei_model.lLike"/>
               <ref name="tei_model.stageLike"/>
               <ref name="tei_model.labelLike"/>
               <ref name="tei_model.pPart.transcriptional"/>
               <ref name="tei_lg"/>
            </choice>
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.lLike"/>
                  <ref name="tei_model.stageLike"/>
                  <ref name="tei_model.labelLike"/>
                  <ref name="tei_model.pPart.transcriptional"/>
                  <ref name="tei_model.global"/>
                  <ref name="tei_lg"/>
               </choice>
            </zeroOrMore>
            <zeroOrMore>
               <group>        
                  <ref name="tei_model.divBottom"/>
                  <zeroOrMore>
                     <ref name="tei_model.global"/>
                  </zeroOrMore>
               </group>
            </zeroOrMore>
         </group>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-lg-atleast1oflggapl-constraint-assert-17">
            <rule context="tei:lg">
               <sch:assert xmlns:rng="http://relaxng.org/ns/structure/1.0"
                           xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                           xmlns="http://www.tei-c.org/ns/1.0"
                           test="count(descendant::tei:lg|descendant::tei:l|descendant::tei:gap) &gt; 0">An lg element
        must contain at least one child l, lg, or gap element.</sch:assert>
            </rule>
         </pattern>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-lg-abstractModel-structure-lg-in-l-constraint-report-13">
            <rule context="tei:lg">
               <sch:report xmlns:rng="http://relaxng.org/ns/structure/1.0"
                           xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                           xmlns="http://www.tei-c.org/ns/1.0"
                           test="ancestor::tei:l[not(.//tei:note//tei:lg[. = current()])]">
        Abstract model violation: Lines may not contain line groups.
      </sch:report>
            </rule>
         </pattern>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.divLike.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_sp">
      <element name="sp">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(speech) contains an individual speech in a performance text, or a passage presented as such in a prose or verse text. [3.13.2. Core Tags for Drama 3.13. Passages of Verse or Drama 7.2.2. Speeches and Speakers]</a:documentation>
         <group>
            <zeroOrMore>
               <ref name="tei_model.global"/>
            </zeroOrMore>
            <optional>
               <group>
                  <ref name="tei_speaker"/>
                  <zeroOrMore>
                     <ref name="tei_model.global"/>
                  </zeroOrMore>
               </group>
            </optional>
            <oneOrMore>
               <group>
                  <choice>
                     <ref name="tei_lg"/>
                     <ref name="tei_model.lLike"/>
                     <ref name="tei_model.pLike"/>
                     <ref name="tei_model.listLike"/>
                     <ref name="tei_model.stageLike"/>
                     <ref name="tei_model.attributable"/>
                  </choice>
                  <choice>
                     <zeroOrMore>
                        <ref name="tei_model.global"/>
                     </zeroOrMore>
                     <ref name="tei_q"/>
                  </choice>
               </group>
            </oneOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.ascribed.directed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_speaker">
      <element name="speaker">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">contains a specialized form of heading or label, giving the name of one or more speakers in a dramatic text or fragment. [3.13.2. Core Tags for Drama]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_stage">
      <element name="stage">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(stage direction) contains any kind of stage direction within a dramatic text or fragment. [3.13.2. Core Tags for Drama 3.13. Passages of Verse or Drama 7.2.4. Stage Directions]</a:documentation>
         <ref name="tei_macro.specialPara"/>
         <ref name="tei_att.ascribed.directed.attributes"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.placement.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the kind of stage direction.
Suggested values include: 1] setting; 2] entrance; 3] exit; 4] business; 5] novelistic; 6] delivery; 7] modifier; 8] location; 9] mixed</a:documentation>
               <list>
                  <zeroOrMore>
                     <choice>
                        <value>setting</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">describes a setting.</a:documentation>
                        <value>entrance</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">describes an entrance.</a:documentation>
                        <value>exit</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">describes an exit.</a:documentation>
                        <value>business</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">describes stage business.</a:documentation>
                        <value>novelistic</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">is a narrative, motivating stage direction.</a:documentation>
                        <value>delivery</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">describes how a character speaks.</a:documentation>
                        <value>modifier</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">gives some detail about a character.</a:documentation>
                        <value>location</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">describes a location.</a:documentation>
                        <value>mixed</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">more than one of the above</a:documentation>
                        <data type="token">
                           <param name="pattern">[^\p{C}\p{Z}]+</param>
                        </data>
                     </choice>
                  </zeroOrMore>
               </list>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_teiCorpus">
      <element name="teiCorpus">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(TEI corpus) contains the whole of a TEI encoded corpus, comprising a single corpus header and one or more <code xmlns="http://www.w3.org/1999/xhtml">&lt;TEI&gt;</code> elements, each containing a single text header and a text. [4. Default Text Structure 15.1. Varieties of Composite Text]</a:documentation>
         <group>
            <ref name="tei_teiHeader"/>
            <zeroOrMore>
               <ref name="tei_model.resource"/>
            </zeroOrMore>
            <oneOrMore>
               <ref name="tei_model.describedResource"/>
            </oneOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="version">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(version) specifies the version number of the TEI Guidelines against which this document is valid.</a:documentation>
               <data type="token">
                  <param name="pattern">[\d]+(\.[\d]+){0,2}</param>
               </data>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_textLang">
      <element name="textLang">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(text language) describes the languages and writing systems identified within the bibliographic work being described, rather than its description. [3.12.2.4. Imprint, Size of a Document, and Reprint Information 10.6.6. Languages and Writing Systems]</a:documentation>
         <ref name="tei_macro.specialPara"/>
         <ref name="tei_att.global.attributes"/>
         <optional>
            <attribute name="mainLang">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(main language) supplies a code which identifies the chief language used in the bibliographic work.</a:documentation>
               <choice>
                  <data type="language"/>
                  <choice>
                     <value/>
                     <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                  </choice>
               </choice>
            </attribute>
         </optional>
         <optional>
            <attribute name="otherLangs">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(other languages) one or more codes identifying any other languages used in the bibliographic work.</a:documentation>
               <list>
                  <zeroOrMore>
                     <choice>
                        <data type="language"/>
                        <choice>
                           <value/>
                           <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        </choice>
                     </choice>
                  </zeroOrMore>
               </list>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_att.datable.custom.attributes">
      <ref name="tei_att.datable.custom.attribute.when-custom"/>
      <ref name="tei_att.datable.custom.attribute.notBefore-custom"/>
      <ref name="tei_att.datable.custom.attribute.notAfter-custom"/>
      <ref name="tei_att.datable.custom.attribute.from-custom"/>
      <ref name="tei_att.datable.custom.attribute.to-custom"/>
      <ref name="tei_att.datable.custom.attribute.datingPoint"/>
      <ref name="tei_att.datable.custom.attribute.datingMethod"/>
   </define>
   <define name="tei_att.datable.custom.attribute.when-custom">
      <optional>
         <attribute name="when-custom">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies the value of a date or time in some custom standard form.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datable.custom.attribute.notBefore-custom">
      <optional>
         <attribute name="notBefore-custom">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the earliest possible date for the event in some custom standard form.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datable.custom.attribute.notAfter-custom">
      <optional>
         <attribute name="notAfter-custom">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the latest possible date for the event in some custom standard form.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datable.custom.attribute.from-custom">
      <optional>
         <attribute name="from-custom">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the starting point of the period in some custom standard form.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datable.custom.attribute.to-custom">
      <optional>
         <attribute name="to-custom">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the ending point of the period in some custom standard form.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datable.custom.attribute.datingPoint">
      <optional>
         <attribute name="datingPoint">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies a pointer to some location defining a named point in time with reference to which the datable item is understood to have occurred</a:documentation>
            <data type="anyURI">
               <param name="pattern">\S+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datable.custom.attribute.datingMethod">
      <optional>
         <attribute name="datingMethod">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies a pointer to a <code xmlns="http://www.w3.org/1999/xhtml">&lt;calendar&gt;</code> element or other means of interpreting the values of the custom dating attributes.</a:documentation>
            <data type="anyURI">
               <param name="pattern">\S+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_model.persNamePart">
      <choice>
         <ref name="tei_surname"/>
         <ref name="tei_forename"/>
         <ref name="tei_genName"/>
         <ref name="tei_nameLink"/>
         <ref name="tei_addName"/>
         <ref name="tei_roleName"/>
         <ref name="tei_persPronouns"/>
      </choice>
   </define>
   <define name="tei_model.persNamePart_alternation">
      <choice>
         <ref name="tei_surname"/>
         <ref name="tei_forename"/>
         <ref name="tei_genName"/>
         <ref name="tei_nameLink"/>
         <ref name="tei_addName"/>
         <ref name="tei_roleName"/>
         <ref name="tei_persPronouns"/>
      </choice>
   </define>
   <define name="tei_model.persNamePart_sequence">
      <ref name="tei_surname"/>
      <ref name="tei_forename"/>
      <ref name="tei_genName"/>
      <ref name="tei_nameLink"/>
      <ref name="tei_addName"/>
      <ref name="tei_roleName"/>
      <ref name="tei_persPronouns"/>
   </define>
   <define name="tei_model.persNamePart_sequenceOptional">
      <optional>
         <ref name="tei_surname"/>
      </optional>
      <optional>
         <ref name="tei_forename"/>
      </optional>
      <optional>
         <ref name="tei_genName"/>
      </optional>
      <optional>
         <ref name="tei_nameLink"/>
      </optional>
      <optional>
         <ref name="tei_addName"/>
      </optional>
      <optional>
         <ref name="tei_roleName"/>
      </optional>
      <optional>
         <ref name="tei_persPronouns"/>
      </optional>
   </define>
   <define name="tei_model.persNamePart_sequenceOptionalRepeatable">
      <zeroOrMore>
         <ref name="tei_surname"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_forename"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_genName"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_nameLink"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_addName"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_roleName"/>
      </zeroOrMore>
      <zeroOrMore>
         <ref name="tei_persPronouns"/>
      </zeroOrMore>
   </define>
   <define name="tei_model.persNamePart_sequenceRepeatable">
      <oneOrMore>
         <ref name="tei_surname"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_forename"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_genName"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_nameLink"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_addName"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_roleName"/>
      </oneOrMore>
      <oneOrMore>
         <ref name="tei_persPronouns"/>
      </oneOrMore>
   </define>
   <define name="tei_att.datable.iso.attributes">
      <ref name="tei_att.datable.iso.attribute.when-iso"/>
      <ref name="tei_att.datable.iso.attribute.notBefore-iso"/>
      <ref name="tei_att.datable.iso.attribute.notAfter-iso"/>
      <ref name="tei_att.datable.iso.attribute.from-iso"/>
      <ref name="tei_att.datable.iso.attribute.to-iso"/>
   </define>
   <define name="tei_att.datable.iso.attribute.when-iso">
      <optional>
         <attribute name="when-iso">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies the value of a date or time in a standard form.</a:documentation>
            <choice>
               <data type="date"/>
               <data type="gYear"/>
               <data type="gMonth"/>
               <data type="gDay"/>
               <data type="gYearMonth"/>
               <data type="gMonthDay"/>
               <data type="time"/>
               <data type="dateTime"/>
               <data type="token">
                  <param name="pattern">[0-9.,DHMPRSTWYZ/:+\-]+</param>
               </data>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datable.iso.attribute.notBefore-iso">
      <optional>
         <attribute name="notBefore-iso">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd.</a:documentation>
            <choice>
               <data type="date"/>
               <data type="gYear"/>
               <data type="gMonth"/>
               <data type="gDay"/>
               <data type="gYearMonth"/>
               <data type="gMonthDay"/>
               <data type="time"/>
               <data type="dateTime"/>
               <data type="token">
                  <param name="pattern">[0-9.,DHMPRSTWYZ/:+\-]+</param>
               </data>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datable.iso.attribute.notAfter-iso">
      <optional>
         <attribute name="notAfter-iso">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd.</a:documentation>
            <choice>
               <data type="date"/>
               <data type="gYear"/>
               <data type="gMonth"/>
               <data type="gDay"/>
               <data type="gYearMonth"/>
               <data type="gMonthDay"/>
               <data type="time"/>
               <data type="dateTime"/>
               <data type="token">
                  <param name="pattern">[0-9.,DHMPRSTWYZ/:+\-]+</param>
               </data>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datable.iso.attribute.from-iso">
      <optional>
         <attribute name="from-iso">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the starting point of the period in standard form.</a:documentation>
            <choice>
               <data type="date"/>
               <data type="gYear"/>
               <data type="gMonth"/>
               <data type="gDay"/>
               <data type="gYearMonth"/>
               <data type="gMonthDay"/>
               <data type="time"/>
               <data type="dateTime"/>
               <data type="token">
                  <param name="pattern">[0-9.,DHMPRSTWYZ/:+\-]+</param>
               </data>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.datable.iso.attribute.to-iso">
      <optional>
         <attribute name="to-iso">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the ending point of the period in standard form.</a:documentation>
            <choice>
               <data type="date"/>
               <data type="gYear"/>
               <data type="gMonth"/>
               <data type="gDay"/>
               <data type="gYearMonth"/>
               <data type="gMonthDay"/>
               <data type="time"/>
               <data type="dateTime"/>
               <data type="token">
                  <param name="pattern">[0-9.,DHMPRSTWYZ/:+\-]+</param>
               </data>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_orgName">
      <element name="orgName">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(organization name) contains an organizational name. [13.2.2. Organizational Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-orgName-calendar-check-orgName-constraint-rule-19">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.personal.attribute.full"/>
         <ref name="tei_att.personal.attribute.sort"/>
         <ref name="tei_att.naming.attribute.role"/>
         <ref name="tei_att.naming.attribute.nymRef"/>
         <ref name="tei_att.canonical.attribute.key"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="ref">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(reference) provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs.</a:documentation>
               <list>
                  <oneOrMore>
                     <choice>
                        <value>#Soc</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#AN</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GN</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MJ</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MM</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#AC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#IDF</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SAE</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#PB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SA-E</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SEU</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#PA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CHC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CDC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CS</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#PO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#StCyr</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CE</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CRN</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CHD</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SDA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SMC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CNat</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SHC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                     </choice>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-orgName-calendar-calendar-check-orgName-constraint-rule-20">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_persName">
      <element name="persName">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(personal name) contains a proper noun or proper-noun phrase referring to a person, possibly including one or more of the person's forenames, surnames, honorifics, added names, etc. [13.2.1. Personal Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-persName-calendar-check-persName-constraint-rule-21">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.personal.attribute.full"/>
         <ref name="tei_att.personal.attribute.sort"/>
         <ref name="tei_att.naming.attribute.role"/>
         <ref name="tei_att.naming.attribute.nymRef"/>
         <ref name="tei_att.canonical.attribute.key"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="ref">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(reference) provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs.</a:documentation>
               <list>
                  <oneOrMore>
                     <choice>
                        <value>#ADp</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Stx</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MtC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Bstd</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#XT</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ATap</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CT</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ATO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#HV</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#VE</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#VERH</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#VIR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#WA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#WH</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#PWill</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JZ</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Ces</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Mul</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#PERS</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BAI</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BARC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BARD</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Bast</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MmeB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CJB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BOL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CAF</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#C</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#DR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Deniz</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#DU</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#EG</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MmeF</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Gatine</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Gib</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JAC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#J</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LXV</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Pec</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#PONT</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Q</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#RA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Sligo</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#VA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#FRO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Bosqu</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#AJC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CDup</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CH</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Dal</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Dupo</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#HG</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JPB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MEL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LX</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#FMaug</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JN</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#AP</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#EP</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#RO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#TC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#TLOUV</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JBVol</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Ambert</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Ballin</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Berr</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Bethm</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Dav</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#deJab</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#WW</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CIC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LdV</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LFab</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#AG</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ART</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BART</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BOLI</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ABE</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BDM</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BDB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Bo</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BRO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BUC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BUX</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#KCI</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ACL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#EC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CLM</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#COX</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#D</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#DA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#DESL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#DP</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#DRO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#QEI</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#EL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#FIL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#FL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#FPC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#FV</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JF</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#AGA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GAU</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GE</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GI</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JBG</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#HA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JH</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#KJI</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JMM</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#DLM</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LEC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LEP</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LSR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LWT</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LPA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LOY</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LUD</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LUS</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GDB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MDP</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MER</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Mi</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MEH</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MON</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MOR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MD</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Ne</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#OC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#PAS</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Pel</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#PD</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#REL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ROG</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SALE</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SAL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SAM</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SFDP</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SOL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#NB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Grey</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GVD</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MMG</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ANog</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#AR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ATelem</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MACK</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Baud</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BEO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Be-Z</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ABour</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CAR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Chara</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#C-A</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CJ</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GdL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Talle</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#FXD</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#DUL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#DuDu</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LEl</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Germa</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#AHav</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#HuyD</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#FI</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Plv</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LaF</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Dfy</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Equ</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#DES</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#RL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JEF</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JorLa</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#DEH</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LTelem</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#HF</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Meril</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#NIC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#NOA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#OB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Parant</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#RS</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#TCA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#THI</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#WAS</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ADA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LP</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#AA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#AD</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JHD</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#EH</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#TRA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ES</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#PER</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LePell</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#AuA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Louisy</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SUG</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SUB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BZ</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BOI</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JFB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                     </choice>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-persName-calendar-calendar-check-persName-constraint-rule-22">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_surname">
      <element name="surname">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(surname) contains a family (inherited) name, as opposed to a given, baptismal, or nick name. [13.2.1. Personal Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.personal.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_forename">
      <element name="forename">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(forename) contains a forename, given or baptismal name. [13.2.1. Personal Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.personal.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_genName">
      <element name="genName">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(generational name component) contains a name component used to distinguish otherwise similar names on the basis of the relative ages or generations of the persons named. [13.2.1. Personal Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.personal.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_nameLink">
      <element name="nameLink">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(name link) contains a connecting phrase or link used within a name but not regarded as part of it, such as van der or of. [13.2.1. Personal Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_addName">
      <element name="addName">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(additional name) contains an additional name component, such as a nickname, epithet, or alias, or any other descriptive phrase used within a personal name. [13.2.1. Personal Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.personal.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_roleName">
      <element name="roleName">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(role name) contains a name component which indicates that the referent has a particular role or position in society, such as an official title or rank. [13.2.1. Personal Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.personal.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_placeName">
      <element name="placeName">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(place name) contains an absolute or relative place name. [13.2.3. Place Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-placeName-calendar-check-placeName-constraint-rule-23">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.personal.attribute.full"/>
         <ref name="tei_att.personal.attribute.sort"/>
         <ref name="tei_att.naming.attribute.role"/>
         <ref name="tei_att.naming.attribute.nymRef"/>
         <ref name="tei_att.canonical.attribute.key"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="ref">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(reference) provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs.</a:documentation>
               <list>
                  <oneOrMore>
                     <choice>
                        <value>#PaP</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#TRI</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CBE</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Hav</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#InO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Lo</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LUC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MAN</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ME</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#NP</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#NI</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#OA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Par</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#PlB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#PE</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#PY</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#StC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#StD</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#StG</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#StV</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#StM</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SaY</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Sav</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SEN</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SW</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#TA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#T</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#TH</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#TO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#TR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Ur</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Ve</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ADN</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Nou</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#AF</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#OR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BAS</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LOU</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#QU</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#VI</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#TOU</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SG</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#COL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MELL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CAS</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#FC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#RE</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CBO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#IAC</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MAS</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#STLO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SALU</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ADS</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#PR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SU</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CU</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#STE</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SAB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Lam</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CdS</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Phd</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Lvp</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Ec</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Nan</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ALL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ANTE</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CHER</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CGR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ETA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#EUR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#FR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GF</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#StP</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#StT</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#STL</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#SEOI</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#TIT</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#VEN</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Ver</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#NY</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#New</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#NJ</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BEN</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ISV</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GEO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Ami</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ANT</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BAR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#B-T</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Bng</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BER</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BE</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BON</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Bor</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BOU</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BOUG</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CapM</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CHAN</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Cha</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Che</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CON</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#CUB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Dar</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#DE</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#DOU</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#USA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#FoR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GdM</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GdA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GR</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GU</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#HO</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#IM</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ISJ</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#IDV</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#IN</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#JA</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#K</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#LH</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#DOM</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Alg</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#ANG</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#BrB</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Cay</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#Esk</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#HT</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#MQ</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        <value>#GP</value>
                        <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                     </choice>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-placeName-calendar-calendar-check-placeName-constraint-rule-24">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_bloc">
      <element name="bloc">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(bloc) contains the name of a geo-political unit consisting of two or more nation states or countries. [13.2.3. Place Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-bloc-calendar-calendar-check-bloc-constraint-rule-25">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_country">
      <element name="country">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(country) contains the name of a geo-political unit, such as a nation, country, colony, or commonwealth, larger than or administratively superior to a region and smaller than a bloc. [13.2.3. Place Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-country-calendar-calendar-check-country-constraint-rule-26">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_region">
      <element name="region">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(region) contains the name of an administrative unit such as a state, province, or county, larger than a settlement, but smaller than a country. [13.2.3. Place Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-region-calendar-calendar-check-region-constraint-rule-27">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_settlement">
      <element name="settlement">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(settlement) contains the name of a settlement such as a city, town, or village identified as a single geo-political or administrative unit. [13.2.3. Place Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-settlement-calendar-calendar-check-settlement-constraint-rule-28">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_district">
      <element name="district">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(district) contains the name of any kind of subdivision of a settlement, such as a parish, ward, or other administrative or geographic unit. [13.2.3. Place Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-district-calendar-calendar-check-district-constraint-rule-29">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_offset">
      <element name="offset">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(offset) marks that part of a relative temporal or spatial expression which indicates the direction of the offset between the two place names, dates, or times involved in the expression. [13.2.3. Place Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-offset-calendar-calendar-check-offset-constraint-rule-30">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_geogName">
      <element name="geogName">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(geographical name) identifies a name associated with some geographical feature such as Windrush Valley or Mount Sinai. [13.2.3. Place Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-geogName-calendar-calendar-check-geogName-constraint-rule-31">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_geogFeat">
      <element name="geogFeat">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(geographical feature name) contains a common noun identifying some geographical feature contained within a geographic name, such as valley, mount, etc. [13.2.3. Place Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-geogFeat-calendar-calendar-check-geogFeat-constraint-rule-32">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_eventName">
      <element name="eventName">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(name of an event) contains a proper noun or noun phrase used to refer to an event. [13.2.4. Event Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.personal.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_affiliation">
      <element name="affiliation">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(affiliation) contains an informal description of a person's present or past affiliation with some organization, for example an employer or sponsor. [15.2.2. The Participant Description]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the element in some sense, using any convenient classification scheme or typology.
Sample values include: 1] sponsor; 2] recommend; 3] discredit; 4] pledged</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-affiliation-calendar-calendar-check-affiliation-constraint-rule-33">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_age">
      <element name="age">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(age) specifies the age of a person. [13.3.2.1. Personal Characteristics]</a:documentation>
         <ref name="tei_macro.phraseSeq.limited"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <ref name="tei_att.dimensions.attributes"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the element in some sense, using any convenient classification scheme or typology.
Sample values include: 1] western; 2] sui; 3] subjective; 4] objective; 5] inWorld (in world); 6] chronological; 7] biological; 8] psychological; 9] functional</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-age-calendar-calendar-check-age-constraint-rule-34">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <optional>
            <attribute name="value">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies a numeric code representing the age or age group</a:documentation>
               <data type="nonNegativeInteger"/>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_birth">
      <element name="birth">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(birth) contains information about a person's birth, such as its date and place. [15.2.2. The Participant Description]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the element in some sense, using any convenient classification scheme or typology.
Sample values include: 1] caesarean (caesarean section); 2] vaginal (vaginal delivery); 3] exNihilo (ex nihilo); 4] incorporated; 5] founded; 6] established</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-birth-calendar-calendar-check-birth-constraint-rule-35">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_climate">
      <element name="climate">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(climate) contains information about the physical climate of a place. [13.3.4.3. States, Traits, and Events]</a:documentation>
         <group>
      
         
      
      
            <zeroOrMore>
               <ref name="tei_model.headLike"/>
            </zeroOrMore>
      
            <choice>
        
          
               <oneOrMore>
                  <ref name="tei_model.pLike"/>
               </oneOrMore>
          
        
        
          
               <oneOrMore>
                  <ref name="tei_model.labelLike"/>
               </oneOrMore>
          
        
            </choice>
      
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.noteLike"/>
                  <ref name="tei_model.biblLike"/>
               </choice>
            </zeroOrMore>
      
      
            <zeroOrMore>
               <ref name="tei_climate"/>
            </zeroOrMore>
      
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-climate-calendar-calendar-check-climate-constraint-rule-36">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_death">
      <element name="death">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(death) contains information about a person's death, such as its date and place. [15.2.2. The Participant Description]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the element in some sense, using any convenient classification scheme or typology.
Sample values include: 1] proclaimed; 2] assumed; 3] verified; 4] clinical; 5] brain; 6] natural; 7] unnatural; 8] fragmentation; 9] dissolution</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-death-calendar-calendar-check-death-constraint-rule-37">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_education">
      <element name="education">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(education) contains a description of the educational experience of a person. [15.2.2. The Participant Description]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the element in some sense, using any convenient classification scheme or typology.
Sample values include: 1] primary; 2] secondary; 3] undergraduate; 4] graduate; 5] residency; 6] apprenticeship</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-education-calendar-calendar-check-education-constraint-rule-38">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_event">
      <element name="event">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(event) contains data relating to anything of significance that happens in time. [13.3.1. Basic Principles]</a:documentation>
         <group>
      
            <zeroOrMore>
               <ref name="tei_model.headLike"/>
            </zeroOrMore>
            <choice>
               <oneOrMore>
                  <ref name="tei_model.pLike"/>
               </oneOrMore>
               <oneOrMore>
                  <ref name="tei_model.labelLike"/>
               </oneOrMore>
               <oneOrMore>
                  <ref name="tei_eventName"/>
               </oneOrMore>
            </choice>
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.noteLike"/>
                  <ref name="tei_model.biblLike"/>
        
        
        
                  <ref name="tei_ptr"/>
               </choice>
            </zeroOrMore>
            <zeroOrMore>
               <choice>
                  <ref name="tei_event"/>
                  <ref name="tei_listEvent"/>
               </choice>
            </zeroOrMore>
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.personLike"/>
                  <ref name="tei_listPerson"/>
               </choice>
            </zeroOrMore>
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.placeLike"/>
                  <ref name="tei_listPlace"/>
               </choice>
            </zeroOrMore>
            <zeroOrMore>
               <ref name="tei_model.objectLike"/>
            </zeroOrMore>
            <zeroOrMore>
               <choice>
                  <ref name="tei_relation"/>
                  <ref name="tei_listRelation"/>
               </choice>
            </zeroOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.locatable.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-event-calendar-calendar-check-event-constraint-rule-39">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
               <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
            systems or calendars to which the date represented by the content of this element belongs,
            but this <sch:name/> element has no textual content.</sch:assert>
            </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_faith">
      <element name="faith">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(faith) specifies the faith, religion, or belief set of a person. [13.3.2.1. Personal Characteristics]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.canonical.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the element in some sense, using any convenient classification scheme or typology.
Sample values include: 1] practicing; 2] clandestine; 3] patrilineal; 4] matrilineal; 5] convert</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-faith-calendar-calendar-check-faith-constraint-rule-40">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_floruit">
      <element name="floruit">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(floruit) contains information about a person's period of activity. [13.3.2.1. Personal Characteristics]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-floruit-calendar-calendar-check-floruit-constraint-rule-41">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_gender">
      <element name="gender">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(gender) specifies the gender identity of a person, persona, or character. [13.3.2.1. Personal Characteristics]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-gender-calendar-calendar-check-gender-constraint-rule-42">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <optional>
            <attribute name="value">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies a coded value for gender identity</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_geo">
      <element name="geo">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(geographical coordinates) contains any expression of a set of geographic coordinates, representing a point, line, or area on the surface of the earth in some notation. [13.3.4.1. Varieties of Location]</a:documentation>
         <text/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_langKnowledge">
      <element name="langKnowledge">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(language knowledge) summarizes the state of a person's linguistic knowledge, either as prose or by a list of <code xmlns="http://www.w3.org/1999/xhtml">&lt;langKnown&gt;</code> elements. [13.3.2.1. Personal Characteristics]</a:documentation>
         <group>        
       
            <choice>
	              <ref name="tei_model.pLike"/>
	              <oneOrMore>
                  <ref name="tei_langKnown"/>
               </oneOrMore>
            </choice>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the element in some sense, using any convenient classification scheme or typology.
Sample values include: 1] listening; 2] speaking; 3] reading; 4] writing</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-langKnowledge-calendar-calendar-check-langKnowledge-constraint-rule-43">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <optional>
            <attribute name="tags">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies one or more valid language tags for the languages specified</a:documentation>
               <list>
                  <oneOrMore>
                     <choice>
                        <data type="language"/>
                        <choice>
                           <value/>
                           <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
                        </choice>
                     </choice>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_langKnown">
      <element name="langKnown">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(language known) summarizes the state of a person's linguistic competence, i.e., knowledge of a single language. [15.2.2. The Participant Description]</a:documentation>
         <ref name="tei_macro.phraseSeq.limited"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-langKnown-calendar-calendar-check-langKnown-constraint-rule-44">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <attribute name="tag">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies a valid language tag for the language concerned.</a:documentation>
            <choice>
               <data type="language"/>
               <choice>
                  <value/>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"/>
               </choice>
            </choice>
         </attribute>
         <optional>
            <attribute name="level">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">a code indicating the person's level of knowledge for this language</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_listOrg">
      <element name="listOrg">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(list of organizations) contains a list of elements, each of which provides information about an identifiable organization. [13.2.2. Organizational Names]</a:documentation>
         <group>
            <zeroOrMore>
               <ref name="tei_model.headLike"/>
            </zeroOrMore>
            <zeroOrMore>
               <ref name="tei_desc"/>
            </zeroOrMore>
            <zeroOrMore>
               <choice>
                  <ref name="tei_relation"/>
                  <ref name="tei_listRelation"/>
               </choice>
            </zeroOrMore>
            <oneOrMore>
               <group>
                  <oneOrMore>
                     <choice>
                        <ref name="tei_org"/>
                        <ref name="tei_listOrg"/>
                     </choice>
                  </oneOrMore>
                  <zeroOrMore>
                     <choice>
                        <ref name="tei_relation"/>
                        <ref name="tei_listRelation"/>
                     </choice>
                  </zeroOrMore>
               </group>
            </oneOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.declarable.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_listEvent">
      <element name="listEvent">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(list of events) contains a list of descriptions, each of which provides information about an identifiable event. [13.3.1. Basic Principles]</a:documentation>
         <group>
            <zeroOrMore>
               <ref name="tei_model.headLike"/>
            </zeroOrMore>
            <zeroOrMore>
               <ref name="tei_desc"/>
            </zeroOrMore>
            <zeroOrMore>
               <choice>
                  <ref name="tei_relation"/>
                  <ref name="tei_listRelation"/>
               </choice>
            </zeroOrMore>
            <oneOrMore>
               <group>
	                 <oneOrMore>
                     <choice>
	                       <ref name="tei_event"/>
	                       <ref name="tei_listEvent"/>
	                    </choice>
                  </oneOrMore>
	                 <zeroOrMore>
                     <choice>
	                       <ref name="tei_relation"/>
	                       <ref name="tei_listRelation"/>
	                    </choice>
                  </zeroOrMore>
               </group>
            </oneOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.declarable.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_listPerson">
      <element name="listPerson">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(list of persons) contains a list of descriptions, each of which provides information about an identifiable person or a group of people, for example the participants in a language interaction, or the people referred to in a historical source. [13.3.2. The Person Element 15.2. Contextual Information 2.4. The Profile Description 15.3.2. Declarable Elements]</a:documentation>
         <group>
            <zeroOrMore>
               <ref name="tei_model.headLike"/>
            </zeroOrMore>
            <zeroOrMore>
               <ref name="tei_desc"/>
            </zeroOrMore>
            <zeroOrMore>
               <choice>
                  <ref name="tei_relation"/>
                  <ref name="tei_listRelation"/>
               </choice>
            </zeroOrMore>
            <oneOrMore>
               <group>
                  <oneOrMore>
                     <choice>
                        <ref name="tei_model.personLike"/>
                        <ref name="tei_listPerson"/>
                     </choice>
                  </oneOrMore>
                  <zeroOrMore>
                     <choice>
                        <ref name="tei_relation"/>
                        <ref name="tei_listRelation"/>
                     </choice>
                  </zeroOrMore>
               </group>
            </oneOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.declarable.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_listPlace">
      <element name="listPlace">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(list of places) contains a list of places, optionally followed by a list of relationships (other than containment) defined amongst them. [2.2.7. The Source Description 13.3.4. Places]</a:documentation>
         <group>
            <zeroOrMore>
               <ref name="tei_model.headLike"/>
            </zeroOrMore>
            <zeroOrMore>
               <ref name="tei_desc"/>
            </zeroOrMore>
            <zeroOrMore>
               <choice>
                  <ref name="tei_relation"/>
                  <ref name="tei_listRelation"/>
               </choice>
            </zeroOrMore>
            <oneOrMore>
               <group>
                  <oneOrMore>
                     <choice>
                        <ref name="tei_model.placeLike"/>
                        <ref name="tei_listPlace"/>
                     </choice>
                  </oneOrMore>
                  <zeroOrMore>
                     <choice>
                        <ref name="tei_relation"/>
                        <ref name="tei_listRelation"/>
                     </choice>
                  </zeroOrMore>
               </group>
            </oneOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.declarable.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_listRelation">
      <element name="listRelation">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">provides information about relationships identified amongst people, places, and organizations, either informally as prose or as formally expressed relation links. [13.3.2.3. Personal Relationships]</a:documentation>
         <group>
            <zeroOrMore>
               <ref name="tei_model.headLike"/>
            </zeroOrMore>
            <zeroOrMore>
               <ref name="tei_desc"/>
            </zeroOrMore>
            <choice>
               <ref name="tei_model.pLike"/>
               <oneOrMore>
                  <choice>
                     <ref name="tei_relation"/>
                     <ref name="tei_listRelation"/>
                  </choice>
               </oneOrMore>
            </choice>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_location">
      <element name="location">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(location) defines the location of a place as a set of geographical coordinates, in terms of other named geo-political entities, or as an address. [13.3.4. Places]</a:documentation>
         <zeroOrMore>
            <choice>
        
               <ref name="tei_model.labelLike"/>
               <ref name="tei_model.placeNamePart"/>
               <ref name="tei_model.offsetLike"/>
               <ref name="tei_model.measureLike"/>
               <ref name="tei_model.addressLike"/>
               <ref name="tei_model.noteLike"/>
               <ref name="tei_model.biblLike"/>
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-location-calendar-calendar-check-location-constraint-rule-45">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_nationality">
      <element name="nationality">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(nationality) contains an informal description of a person's present or past nationality or citizenship. [15.2.2. The Participant Description]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the element in some sense, using any convenient classification scheme or typology.
Sample values include: 1] birth; 2] naturalised; 3] self-assigned</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-nationality-calendar-calendar-check-nationality-constraint-rule-46">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_occupation">
      <element name="occupation">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(occupation) contains an informal description of a person's trade, profession or occupation. [15.2.2. The Participant Description]</a:documentation>
         <ref name="tei_macro.specialPara"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the element in some sense, using any convenient classification scheme or typology.
Sample values include: 1] primary; 2] other; 3] paid; 4] unpaid</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-occupation-calendar-calendar-check-occupation-constraint-rule-47">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <optional>
            <attribute name="scheme">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates the classification system or taxonomy in use, for example by supplying the identifier of a <code xmlns="http://www.w3.org/1999/xhtml">&lt;taxonomy&gt;</code> element, or pointing to some other resource.</a:documentation>
               <data type="anyURI">
                  <param name="pattern">\S+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="code">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">identifies an occupation code defined within the classification system or taxonomy defined by the <code xmlns="http://www.w3.org/1999/xhtml">@scheme</code> attribute.</a:documentation>
               <data type="anyURI">
                  <param name="pattern">\S+</param>
               </data>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_org">
      <element name="org">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(organization) provides information about an identifiable organization such as a business, a tribe, or any other grouping of people. [13.3.3. Organizational Data]</a:documentation>
         <group>
            <zeroOrMore>
               <ref name="tei_model.headLike"/>
            </zeroOrMore>
            <choice>
               <zeroOrMore>
                  <ref name="tei_model.pLike"/>
               </zeroOrMore>
               <zeroOrMore>
                  <choice>
                     <ref name="tei_model.labelLike"/>
                     <ref name="tei_model.nameLike"/>
                     <ref name="tei_model.placeLike"/>
                     <ref name="tei_model.orgPart"/>
                     <ref name="tei_model.milestoneLike"/>
                  </choice>
               </zeroOrMore>
            </choice>
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.noteLike"/>
                  <ref name="tei_model.biblLike"/>
        
        
                  <ref name="tei_ptr"/>
               </choice>
            </zeroOrMore>
            <zeroOrMore>
               <ref name="tei_model.personLike"/>
            </zeroOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <optional>
            <attribute name="role">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies a primary role or classification for the organization.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_person">
      <element name="person">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(person) provides information about an identifiable individual, for example a participant in a language interaction, or a person referred to in a historical source. [13.3.2. The Person Element 15.2.2. The Participant Description]</a:documentation>
         <choice>
      
            <oneOrMore>
               <ref name="tei_model.pLike"/>
            </oneOrMore>
      
      
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.personPart"/>
                  <ref name="tei_model.global"/>
                  <ref name="tei_ptr"/>
               </choice>
            </zeroOrMore>
      
         </choice>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <optional>
            <attribute name="role">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies a primary role or classification for the person.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <optional>
            <attribute name="sex">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the sex of the person.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <optional>
            <attribute name="gender">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the gender of the person.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <optional>
            <attribute name="age">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies an age group for the person.</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_persona">
      <element name="persona">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">provides information about one of the personalities identified for a given individual, where an individual has multiple personalities. [13.3.2. The Person Element]</a:documentation>
         <choice>   
            <oneOrMore>
               <ref name="tei_model.pLike"/>
            </oneOrMore>      
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.personPart"/>
                  <ref name="tei_model.global"/>
               </choice>
            </zeroOrMore>
         </choice>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <optional>
            <attribute name="role">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies a primary role or classification for the persona.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <optional>
            <attribute name="sex">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the sex of the persona.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <optional>
            <attribute name="gender">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the gender of the persona.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <optional>
            <attribute name="age">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies an age group for the persona.</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_personGrp">
      <element name="personGrp">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(personal group) describes a group of individuals treated as a single person for analytic purposes. [15.2.2. The Participant Description]</a:documentation>
         <choice>
      
            <oneOrMore>
               <ref name="tei_model.pLike"/>
            </oneOrMore>
      
      
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.personPart"/>
                  <ref name="tei_model.global"/>
               </choice>
            </zeroOrMore>
      
         </choice>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <optional>
            <attribute name="role">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the role of this group of participants in the interaction.</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="sex">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the sex of the participant group.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <optional>
            <attribute name="gender">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the gender of the participant group.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <optional>
            <attribute name="age">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the age group of the participants.</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="size">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">describes informally the size or approximate size of the group for example by means of a number and an indication of accuracy e.g. approx 200.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_persPronouns">
      <element name="persPronouns">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(personal pronouns) indicates the personal pronouns used, or assumed to be used, by the individual being described. [13.3.2.1. Personal Characteristics]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="evidence">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(evidence) indicates support for the listed personal pronouns.
Suggested values include: 1] conjecture (conjecture); 2] selfIdentification (self identification); 3] trustedThirdParty (trusted third party)</a:documentation>
               <choice>
                  <value>conjecture</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(conjecture) The given value was selected based on assumptions by someone besides the person to whom this pronoun applies. As a result, the value may be erroneous.</a:documentation>
                  <value>selfIdentification</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(self identification) The given value has been explicitly stated or confirmed by the person to whom this pronoun applies.</a:documentation>
                  <value>trustedThirdParty</value>
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(trusted third party) The given value has been supplied by another individual trusted by the encoder to know the preferences of the person to whom this pronoun applies.</a:documentation>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </choice>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-persPronouns-calendar-calendar-check-persPronouns-constraint-rule-48">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <optional>
            <attribute name="value">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(value) supplies a regularized value for personal pronouns.
Sample values include: 1] e (e); 2] he (he); 3] she (she); 4] they (they)</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_place">
      <element name="place">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(place) contains data about a geographic location [13.3.4. Places]</a:documentation>
         <group>
      
            <zeroOrMore>
               <ref name="tei_model.headLike"/>
            </zeroOrMore>
      
            <choice>
        
          
               <zeroOrMore>
                  <ref name="tei_model.pLike"/>
               </zeroOrMore>
          
        
        
               <zeroOrMore>
                  <choice>
                     <ref name="tei_model.labelLike"/>
                     <ref name="tei_model.placeStateLike"/>
                     <ref name="tei_model.eventLike"/>
                     <ref name="tei_name"/>
                  </choice>
               </zeroOrMore>
        
            </choice>
      
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.noteLike"/>
                  <ref name="tei_model.biblLike"/>
          
                  <ref name="tei_ptr"/>
          
          
               </choice>
            </zeroOrMore>
      
      
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.placeLike"/>
                  <ref name="tei_listPlace"/>
               </choice>
            </zeroOrMore>
      
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_population">
      <element name="population">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(population) contains information about the population of a place. [13.3.4.3. States, Traits, and Events]</a:documentation>
         <group>
      
            <zeroOrMore>
               <ref name="tei_model.headLike"/>
            </zeroOrMore>
            <optional>
               <group>
                  <choice>
                     <oneOrMore>
                        <ref name="tei_model.pLike"/>
                     </oneOrMore>
                     <oneOrMore>
                        <ref name="tei_model.labelLike"/>
                     </oneOrMore>
                  </choice>
                  <zeroOrMore>
                     <choice>
                        <ref name="tei_model.noteLike"/>
                        <ref name="tei_model.biblLike"/>
                     </choice>
                  </zeroOrMore>
               </group>
            </optional>
            <zeroOrMore>
               <ref name="tei_population"/>
            </zeroOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-population-calendar-calendar-check-population-constraint-rule-49">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_relation">
      <element name="relation">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(relationship) describes any kind of relationship or linkage amongst a specified group of places, events, persons, objects or other items. [13.3.2.3. Personal Relationships]</a:documentation>
         <optional>
            <ref name="tei_desc"/>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-relation-reforkeyorname-constraint-assert-49">
            <rule context="tei:relation">
               <assert xmlns:rng="http://relaxng.org/ns/structure/1.0"
                       xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                       xmlns:xi="http://www.w3.org/2001/XInclude"
                       test="@ref or @key or @name">One of the attributes  'name', 'ref' or 'key' must be supplied</assert>
            </rule>
         </pattern>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-relation-activemutual-constraint-report-14">
            <rule context="tei:relation">
               <report xmlns:rng="http://relaxng.org/ns/structure/1.0"
                       xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                       xmlns:xi="http://www.w3.org/2001/XInclude"
                       test="@active and @mutual">Only one of the attributes @active and @mutual may be supplied</report>
            </rule>
         </pattern>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-relation-activepassive-constraint-report-15">
            <rule context="tei:relation">
               <report xmlns:rng="http://relaxng.org/ns/structure/1.0"
                       xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                       xmlns:xi="http://www.w3.org/2001/XInclude"
                       test="@passive and not(@active)">the attribute 'passive' may be supplied only if the attribute 'active' is supplied</report>
            </rule>
         </pattern>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.canonical.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-relation-calendar-calendar-check-relation-constraint-rule-50">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <optional>
            <attribute name="name">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies a name for the kind of relationship of which this is an instance.</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <choice>
            <optional>
               <attribute name="active">
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">identifies the active participants in a non-mutual relationship, or all the participants in a mutual one.</a:documentation>
                  <list>
                     <oneOrMore>
                        <data type="anyURI">
                           <param name="pattern">\S+</param>
                        </data>
                     </oneOrMore>
                  </list>
               </attribute>
            </optional>
            <optional>
               <attribute name="mutual">
                  <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies a list of participants amongst all of whom the relationship holds equally.</a:documentation>
                  <list>
                     <oneOrMore>
                        <data type="anyURI">
                           <param name="pattern">\S+</param>
                        </data>
                     </oneOrMore>
                  </list>
               </attribute>
            </optional>
         </choice>
         <optional>
            <attribute name="passive">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">identifies the passive participants in a non-mutual relationship.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_residence">
      <element name="residence">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(residence) describes a person's present or past places of residence. [15.2.2. The Participant Description]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the element in some sense, using any convenient classification scheme or typology.
Sample values include: 1] primary; 2] secondary; 3] temporary; 4] permanent</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-residence-calendar-calendar-check-residence-constraint-rule-51">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_sex">
      <element name="sex">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(sex) specifies the sex of an organism. [13.3.2.1. Personal Characteristics]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-sex-calendar-calendar-check-sex-constraint-rule-52">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <optional>
            <attribute name="value">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">supplies a coded value for sex</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_socecStatus">
      <element name="socecStatus">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(socio-economic status) contains an informal description of a person's perceived social or economic status. [15.2.2. The Participant Description]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">characterizes the element in some sense, using any convenient classification scheme or typology.
Sample values include: 1] atBirth; 2] atDeath; 3] dependent; 4] inherited; 5] independent</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-socecStatus-calendar-calendar-check-socecStatus-constraint-rule-53">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <optional>
            <attribute name="scheme">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">identifies the classification system or taxonomy in use, for example by pointing to a locally-defined <code xmlns="http://www.w3.org/1999/xhtml">&lt;taxonomy&gt;</code> element or by supplying a URI for an externally-defined system.</a:documentation>
               <data type="anyURI">
                  <param name="pattern">\S+</param>
               </data>
            </attribute>
         </optional>
         <optional>
            <attribute name="code">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">identifies a status code defined within the classification system or taxonomy defined by the <code xmlns="http://www.w3.org/1999/xhtml">@scheme</code> attribute.</a:documentation>
               <data type="anyURI">
                  <param name="pattern">\S+</param>
               </data>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_state">
      <element name="state">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(state) contains a description of some status or quality attributed to a person, place, or organization often at some specific time or for a specific date range. [13.3.1. Basic Principles 13.3.2.1. Personal Characteristics]</a:documentation>
         <group>
      
            <choice>
               <oneOrMore>
                  <ref name="tei_state"/>
               </oneOrMore>
               <group>
                  <zeroOrMore>
                     <ref name="tei_model.headLike"/>
                  </zeroOrMore>
                  <oneOrMore>
                     <ref name="tei_model.pLike"/>
                  </oneOrMore>
                  <zeroOrMore>
                     <choice>
                        <ref name="tei_model.noteLike"/>
                        <ref name="tei_model.biblLike"/>
                     </choice>
                  </zeroOrMore>
               </group>
               <zeroOrMore>
                  <choice>
                     <ref name="tei_model.labelLike"/>
                     <ref name="tei_model.noteLike"/>
                     <ref name="tei_model.biblLike"/>
                  </choice>
               </zeroOrMore>
            </choice>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-state-calendar-calendar-check-state-constraint-rule-54">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_terrain">
      <element name="terrain">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(terrain) contains information about the physical terrain of a place. [13.3.4.3. States, Traits, and Events]</a:documentation>
         <group>
      
         
      
      
            <zeroOrMore>
               <ref name="tei_model.headLike"/>
            </zeroOrMore>
      
            <choice>
        
          
               <oneOrMore>
                  <ref name="tei_model.pLike"/>
               </oneOrMore>
          
        
        
          
               <oneOrMore>
                  <ref name="tei_model.labelLike"/>
               </oneOrMore>
          
        
            </choice>
      
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.noteLike"/>
                  <ref name="tei_model.biblLike"/>
               </choice>
            </zeroOrMore>
      
      
            <zeroOrMore>
               <ref name="tei_terrain"/>
            </zeroOrMore>
      
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-terrain-calendar-calendar-check-terrain-constraint-rule-55">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_trait">
      <element name="trait">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(trait) contains a description of some status or quality attributed to a person, place, or organization typically, but not necessarily, independent of the volition or action of the holder and usually not at some specific time or for a specific date range. [13.3.1. Basic Principles 13.3.2.1. Personal Characteristics]</a:documentation>
         <group>
      
            <choice>
               <oneOrMore>
                  <ref name="tei_trait"/>
               </oneOrMore>
               <group>
                  <zeroOrMore>
                     <ref name="tei_model.headLike"/>
                  </zeroOrMore>
                  <oneOrMore>
                     <ref name="tei_model.pLike"/>
                  </oneOrMore>
                  <zeroOrMore>
                     <choice>
                        <ref name="tei_model.noteLike"/>
                        <ref name="tei_model.biblLike"/>
                     </choice>
                  </zeroOrMore>
               </group>
               <zeroOrMore>
                  <choice>
                     <ref name="tei_model.labelLike"/>
                     <ref name="tei_model.noteLike"/>
                     <ref name="tei_model.biblLike"/>
                  </choice>
               </zeroOrMore>
            </choice>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.naming.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-trait-calendar-calendar-check-trait-constraint-rule-56">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_objectName">
      <element name="objectName">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(name of an object) contains a proper noun or noun phrase used to refer to an object. [13.2.5. Object Names]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.personal.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="calendar">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">indicates one or more systems or calendars to which the date represented by the content of this element belongs.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-objectName-calendar-calendar-check-objectName-constraint-rule-57">
            <sch:rule xmlns:rng="http://relaxng.org/ns/structure/1.0"
                      xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                      xmlns:xi="http://www.w3.org/2001/XInclude"
                      xmlns="http://www.tei-c.org/ns/1.0"
                      context="tei:*[@calendar]">
                    <sch:assert test="string-length( normalize-space(.) ) gt 0"> @calendar indicates one or more
                        systems or calendars to which the date represented by the content of this element belongs,
                        but this <sch:name/> element has no textual content.</sch:assert>
                </sch:rule>
         </pattern>
         <empty/>
      </element>
   </define>
   <define name="tei_object">
      <element name="object">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">contains a description of a single identifiable physical object. [13.3.6. Objects]</a:documentation>
         <group>
            <oneOrMore>
               <ref name="tei_objectIdentifier"/>
            </oneOrMore>
            <zeroOrMore>
               <ref name="tei_model.headLike"/>
            </zeroOrMore>
      
            <choice>
               <oneOrMore>
                  <ref name="tei_model.pLike"/>
               </oneOrMore>
        
               <zeroOrMore>
                  <empty/>
               </zeroOrMore>
            </choice>
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.noteLike"/>
                  <ref name="tei_model.biblLike"/>
        
        
               </choice>
            </zeroOrMore>
            <zeroOrMore>
               <ref name="tei_object"/>
            </zeroOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <ref name="tei_att.docStatus.attributes"/>
         <ref name="tei_att.canonical.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_listObject">
      <element name="listObject">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(list of objects) contains a list of descriptions, each of which provides information about an identifiable physical object. [13.3.6. Objects]</a:documentation>
         <group>
            <zeroOrMore>
               <ref name="tei_model.headLike"/>
            </zeroOrMore>
            <zeroOrMore>
               <ref name="tei_desc"/>
            </zeroOrMore>
            <zeroOrMore>
               <choice>
                  <ref name="tei_relation"/>
                  <ref name="tei_listRelation"/>
               </choice>
            </zeroOrMore>
            <oneOrMore>
               <group>
                  <oneOrMore>
                     <ref name="tei_model.objectLike"/>
                  </oneOrMore>
                  <zeroOrMore>
                     <choice>
                        <ref name="tei_relation"/>
                        <ref name="tei_listRelation"/>
                     </choice>
                  </zeroOrMore>
               </group>
            </oneOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.declarable.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_objectIdentifier">
      <element name="objectIdentifier">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(object identifier) groups one or more identifiers or pieces of locating information concerning a single object. [13.3.6. Objects]</a:documentation>
         <oneOrMore>
            <choice>
               <ref name="tei_model.placeNamePart"/>
      
      
      
      
      
               <ref name="tei_objectName"/>
      
               <ref name="tei_address"/>
            </choice>
         </oneOrMore>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_nym">
      <element name="nym">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(canonical name) contains the definition for a canonical name or name component of any kind. [13.3.7. Names and Nyms]</a:documentation>
         <group>

          
            <zeroOrMore>
               <ref name="tei_model.entryPart"/>
            </zeroOrMore>
        
      
      
        
            <zeroOrMore>
               <ref name="tei_model.pLike"/>
            </zeroOrMore>
        
      
      
        
            <zeroOrMore>
               <ref name="tei_nym"/>
            </zeroOrMore>
        
      
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <optional>
            <attribute name="parts">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">points to constituent nyms</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="anyURI">
                        <param name="pattern">\S+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_listNym">
      <element name="listNym">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(list of canonical names) contains a list of nyms, that is, standardized names for any thing. [13.3.7. Names and Nyms]</a:documentation>
         <group>
            <zeroOrMore>
               <ref name="tei_model.headLike"/>
            </zeroOrMore>
            <zeroOrMore>
               <ref name="tei_desc"/>
            </zeroOrMore>
            <zeroOrMore>
               <choice>
                  <ref name="tei_relation"/>
                  <ref name="tei_listRelation"/>
               </choice>
            </zeroOrMore>
            <oneOrMore>
               <group>
                  <oneOrMore>
                     <choice>
                        <ref name="tei_nym"/>
                        <ref name="tei_listNym"/>
                     </choice>
                  </oneOrMore>
                  <zeroOrMore>
                     <choice>
                        <ref name="tei_relation"/>
                        <ref name="tei_listRelation"/>
                     </choice>
                  </zeroOrMore>
               </group>
            </oneOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.declarable.attributes"/>
         <ref name="tei_att.sortable.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_teiHeader">
      <element name="teiHeader">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(TEI header) supplies descriptive and declarative metadata associated with a digital resource or set of resources. [2.1.1. The TEI Header and Its Components 15.1. Varieties of Composite Text]</a:documentation>
         <group>
            <ref name="tei_fileDesc"/>
            <zeroOrMore>
               <ref name="tei_model.teiHeaderPart"/>
            </zeroOrMore>
      
         </group>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_fileDesc">
      <element name="fileDesc">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(file description) contains a full bibliographic description of an electronic file. [2.2. The File Description 2.1.1. The TEI Header and Its Components]</a:documentation>
         <group>
            <group>
               <ref name="tei_titleStmt"/>
        
               <optional>
                  <ref name="tei_editionStmt"/>
               </optional>
        
        
          
        
               <ref name="tei_publicationStmt"/>
        
          
        
        
          
        
            </group>
      
            <oneOrMore>
               <ref name="tei_sourceDesc"/>
            </oneOrMore>
      
         </group>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_titleStmt">
      <element name="titleStmt">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(title statement) groups information about the title of a work and those responsible for its content. [2.2.1. The Title Statement 2.2. The File Description]</a:documentation>
         <group>
            <oneOrMore>
               <ref name="tei_title"/>
            </oneOrMore>
            <zeroOrMore>
               <ref name="tei_model.respLike"/>
            </zeroOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_editionStmt">
      <element name="editionStmt">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(edition statement) groups information relating to one edition of a text. [2.2.2. The Edition Statement 2.2. The File Description]</a:documentation>
         <choice>
      
            <oneOrMore>
               <ref name="tei_model.pLike"/>
            </oneOrMore>
      
      
        
        
            <zeroOrMore>
               <ref name="tei_model.respLike"/>
            </zeroOrMore>
        
      
         </choice>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_publicationStmt">
      <element name="publicationStmt">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(publication statement) groups information concerning the publication or distribution of an electronic or other text. [2.2.4. Publication, Distribution, Licensing, etc. 2.2. The File Description]</a:documentation>
         <choice>
      
	           <oneOrMore>
               <group>
	  
	                 <ref name="tei_model.publicationStmtPart.agency"/>
	  
	  
	                 <zeroOrMore>
                     <ref name="tei_model.publicationStmtPart.detail"/>
                  </zeroOrMore>
	  
	              </group>
            </oneOrMore>
      
      
	           <oneOrMore>
               <ref name="tei_model.pLike"/>
            </oneOrMore>
      
         </choice>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_sourceDesc">
      <element name="sourceDesc">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(source description) describes the source(s) from which an electronic text was derived or generated, typically a bibliographic description in the case of a digitized text, or a phrase such as "born digital" for a text which has no previous existence. [2.2.7. The Source Description]</a:documentation>
         <choice>
            <oneOrMore>
               <ref name="tei_model.pLike"/>
            </oneOrMore>
            <oneOrMore>
               <choice>
                  <ref name="tei_model.biblLike"/>
                  <ref name="tei_model.sourceDescPart"/>
                  <ref name="tei_model.listLike"/>
               </choice>
            </oneOrMore>
         </choice>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.declarable.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_TEI">
      <element name="TEI">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(TEI document) contains a single TEI-conformant document, combining a single TEI header with one or more members of the model.resource class. Multiple <code xmlns="http://www.w3.org/1999/xhtml">&lt;TEI&gt;</code> elements may be combined within a <code xmlns="http://www.w3.org/1999/xhtml">&lt;TEI&gt;</code> (or <code xmlns="http://www.w3.org/1999/xhtml">&lt;teiCorpus&gt;</code>) element. [4. Default Text Structure 15.1. Varieties of Composite Text]</a:documentation>
         <group>
            <ref name="tei_teiHeader"/>
            <choice>
               <group>
                  <oneOrMore>
                     <ref name="tei_model.resource"/>
                  </oneOrMore>
                  <zeroOrMore>
                     <ref name="tei_TEI"/>
                  </zeroOrMore>
               </group>
               <oneOrMore>
                  <ref name="tei_TEI"/>
               </oneOrMore>
            </choice>
         </group>
         <sch:ns xmlns:rng="http://relaxng.org/ns/structure/1.0"
                 xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                 xmlns="http://www.tei-c.org/ns/1.0"
                 prefix="tei"
                 uri="http://www.tei-c.org/ns/1.0"/>
         <sch:ns xmlns:rng="http://relaxng.org/ns/structure/1.0"
                 xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                 xmlns="http://www.tei-c.org/ns/1.0"
                 prefix="xs"
                 uri="http://www.w3.org/2001/XMLSchema"/>
         <sch:ns xmlns:rng="http://relaxng.org/ns/structure/1.0"
                 xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                 xmlns="http://www.tei-c.org/ns/1.0"
                 prefix="rng"
                 uri="http://relaxng.org/ns/structure/1.0"/>
         <sch:ns xmlns:rng="http://relaxng.org/ns/structure/1.0"
                 xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                 xmlns="http://www.tei-c.org/ns/1.0"
                 prefix="rna"
                 uri="http://relaxng.org/ns/compatibility/annotations/1.0"/>
         <sch:ns xmlns:rng="http://relaxng.org/ns/structure/1.0"
                 xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                 xmlns="http://www.tei-c.org/ns/1.0"
                 prefix="sch"
                 uri="http://purl.oclc.org/dsdl/schematron"/>
         <sch:ns xmlns:rng="http://relaxng.org/ns/structure/1.0"
                 xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                 xmlns="http://www.tei-c.org/ns/1.0"
                 prefix="sch1x"
                 uri="http://www.ascc.net/xml/schematron"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="version">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">specifies the version number of the TEI Guidelines against which this document is valid.</a:documentation>
               <data type="token">
                  <param name="pattern">[\d]+(\.[\d]+){0,2}</param>
               </data>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_text">
      <element name="text">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(text) contains a single text of any kind, whether unitary or composite, for example a poem or drama, a collection of essays, a novel, a dictionary, or a corpus sample. [4. Default Text Structure 15.1. Varieties of Composite Text]</a:documentation>
         <group>
            <zeroOrMore>
               <ref name="tei_model.global"/>
            </zeroOrMore>
            <optional>
               <group>
                  <ref name="tei_front"/>
	                 <zeroOrMore>
                     <ref name="tei_model.global"/>
                  </zeroOrMore>
               </group>
            </optional>
            <choice>
               <ref name="tei_body"/>
               <ref name="tei_group"/>
            </choice>
            <zeroOrMore>
               <ref name="tei_model.global"/>
            </zeroOrMore>
            <optional>
               <group>
                  <ref name="tei_back"/>
	                 <zeroOrMore>
                     <ref name="tei_model.global"/>
                  </zeroOrMore>
               </group>
            </optional>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_body">
      <element name="body">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(text body) contains the whole body of a single unitary text, excluding any front or back matter. [4. Default Text Structure]</a:documentation>
         <group>
            
            <zeroOrMore>
               <ref name="tei_model.global"/>
            </zeroOrMore>
            
            <optional>
               <group>
                  <ref name="tei_model.divTop"/>
                  <zeroOrMore>
                     <choice>
                        <ref name="tei_model.global"/>
                        <ref name="tei_model.divTop"/>
                     </choice>
                  </zeroOrMore>          
               </group>
            </optional>
            
            <optional>
               <group>
                  <ref name="tei_model.divGenLike"/>
                  <zeroOrMore>
                     <choice>
                        <ref name="tei_model.global"/>
                        <ref name="tei_model.divGenLike"/>
                     </choice>
                  </zeroOrMore>          
               </group>
            </optional>
      
            <choice>
                  
               <oneOrMore>
                  <group>
                     <ref name="tei_model.divLike"/>
                     <zeroOrMore>
                        <choice>
                           <ref name="tei_model.global"/>
                           <ref name="tei_model.divGenLike"/>
                        </choice>
                     </zeroOrMore>
                  </group>
               </oneOrMore>
        
               <oneOrMore>
                  <group>
                     <ref name="tei_model.div1Like"/>
                     <zeroOrMore>
                        <choice>
                           <ref name="tei_model.global"/>
                           <ref name="tei_model.divGenLike"/>
                        </choice>
                     </zeroOrMore>
                  </group>
               </oneOrMore>
        
               <group>
                  <oneOrMore>
                     <group>
                        <choice>
              
                           <ref name="tei_model.common"/>
                        </choice>
                        <zeroOrMore>
                           <ref name="tei_model.global"/>
                        </zeroOrMore>
                     </group>
                  </oneOrMore>
                  <optional>
                     <choice>
            
                        <oneOrMore>
                           <group>
                              <ref name="tei_model.divLike"/>
                              <zeroOrMore>
                                 <choice>
                                    <ref name="tei_model.global"/>
                                    <ref name="tei_model.divGenLike"/>
                                 </choice>
                              </zeroOrMore>
                           </group>
                        </oneOrMore>
            
                        <oneOrMore>
                           <group>
                              <ref name="tei_model.div1Like"/>
                              <zeroOrMore>
                                 <choice>
                                    <ref name="tei_model.global"/>
                                    <ref name="tei_model.divGenLike"/>
                                 </choice>
                              </zeroOrMore>
                           </group>
                        </oneOrMore>
                     </choice>
                  </optional>
               </group>
            </choice>
      
      
            <zeroOrMore>
               <group>
                  <ref name="tei_model.divBottom"/>
                  <zeroOrMore>
                     <ref name="tei_model.global"/>
                  </zeroOrMore>
               </group>
            </zeroOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_group">
      <element name="group">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(group) contains the body of a composite text, grouping together a sequence of distinct texts (or groups of such texts) which are regarded as a unit for some purpose, for example the collected works of an author, a sequence of prose essays, etc. [4. Default Text Structure 4.3.1. Grouped Texts 15.1. Varieties of Composite Text]</a:documentation>
         <group>
      
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.divTop"/>
                  <ref name="tei_model.global"/>
               </choice>
            </zeroOrMore>
      
            <group>
               <choice>
                  <ref name="tei_text"/>
                  <ref name="tei_group"/>
               </choice>
        
               <zeroOrMore>
                  <choice>
                     <ref name="tei_text"/>
                     <ref name="tei_group"/>
                     <ref name="tei_model.global"/>
                  </choice>
               </zeroOrMore>
        
            </group>
      
            <zeroOrMore>
               <ref name="tei_model.divBottom"/>
            </zeroOrMore>
      
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_floatingText">
      <element name="floatingText">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(floating text) contains a single text of any kind, whether unitary or composite, which interrupts the text containing it at any point and after which the surrounding text resumes. [4.3.2. Floating Texts]</a:documentation>
         <group>
      
            <zeroOrMore>
               <ref name="tei_model.global"/>
            </zeroOrMore>
      
            <optional>
               <group>
                  <ref name="tei_front"/>
        
                  <zeroOrMore>
                     <ref name="tei_model.global"/>
                  </zeroOrMore>
        
               </group>
            </optional>
            <choice>
               <ref name="tei_body"/>
               <ref name="tei_group"/>
            </choice>
      
            <zeroOrMore>
               <ref name="tei_model.global"/>
            </zeroOrMore>
      
            <optional>
               <group>
                  <ref name="tei_back"/>
        
                  <zeroOrMore>
                     <ref name="tei_model.global"/>
                  </zeroOrMore>
        
               </group>
            </optional>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_div">
      <element name="div">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(text division) contains a subdivision of the front, body, or back of a text. [4.1. Divisions of the Body]</a:documentation>
         <group>
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.divTop"/>
        
                  <ref name="tei_model.global"/>
               </choice>
            </zeroOrMore>
            <optional>
               <group>
                  <choice>
                     <oneOrMore>
                        <group>
                           <choice>
                              <ref name="tei_model.divLike"/>
                              <ref name="tei_model.divGenLike"/>
                           </choice>
                           <zeroOrMore>
                              <ref name="tei_model.global"/>
                           </zeroOrMore>
                        </group>
                     </oneOrMore>
                     <group>
                        <oneOrMore>
                           <group>
                              <choice>
                
                                 <ref name="tei_model.common"/>
                              </choice>
                              <zeroOrMore>
                                 <ref name="tei_model.global"/>
                              </zeroOrMore>
                           </group>
                        </oneOrMore>
                        <zeroOrMore>
                           <group>
                              <choice>
                                 <ref name="tei_model.divLike"/>
                                 <ref name="tei_model.divGenLike"/>
                              </choice>
                              <zeroOrMore>
                                 <ref name="tei_model.global"/>
                              </zeroOrMore>
                           </group>
                        </zeroOrMore>
                     </group>
                  </choice>
                  <zeroOrMore>
                     <group>
                        <ref name="tei_model.divBottom"/>
                        <zeroOrMore>
                           <ref name="tei_model.global"/>
                        </zeroOrMore>
                     </group>
                  </zeroOrMore>
               </group>
            </optional>
         </group>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-div-abstractModel-structure-div-in-l-or-lg-constraint-report-16">
            <rule context="tei:div">
               <sch:report xmlns:rng="http://relaxng.org/ns/structure/1.0"
                           xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                           xmlns="http://www.tei-c.org/ns/1.0"
                           test="(ancestor::tei:l or ancestor::tei:lg) and not(ancestor::tei:floatingText)">
        Abstract model violation: Lines may not contain higher-level structural elements such as div, unless div is a descendant of floatingText.
      </sch:report>
            </rule>
         </pattern>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-div-abstractModel-structure-div-in-ab-or-p-constraint-report-17">
            <rule context="tei:div">
               <sch:report xmlns:rng="http://relaxng.org/ns/structure/1.0"
                           xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                           xmlns="http://www.tei-c.org/ns/1.0"
                           test="(ancestor::tei:p or ancestor::tei:ab) and not(ancestor::tei:floatingText)">
        Abstract model violation: p and ab may not contain higher-level structural elements such as div, unless div is a descendant of floatingText.
      </sch:report>
            </rule>
         </pattern>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.divLike.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_trailer">
      <element name="trailer">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">contains a closing title or footer appearing at the end of a division of a text. [4.2.4. Content of Textual Divisions 4.2. Elements Common to All Divisions]</a:documentation>
         <zeroOrMore>
            <choice>
	              <text/>
	              <ref name="tei_lg"/>
	              <ref name="tei_model.gLike"/>
	              <ref name="tei_model.phrase"/>
	              <ref name="tei_model.inter"/>
	              <ref name="tei_model.lLike"/>
	              <ref name="tei_model.global"/>
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.placement.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_byline">
      <element name="byline">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(byline) contains the primary statement of responsibility given for a work on its title page or at the head or end of the work. [4.2.2. Openers and Closers 4.5. Front Matter]</a:documentation>
         <zeroOrMore>
            <choice>
               <text/>
               <ref name="tei_model.gLike"/>
               <ref name="tei_model.phrase"/>
               <ref name="tei_docAuthor"/>
               <ref name="tei_model.global"/>
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_dateline">
      <element name="dateline">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(dateline) contains a brief description of the place, date, time, etc. of production of a letter, newspaper story, or other work, prefixed or suffixed to it as a kind of heading or trailer. [4.2.2. Openers and Closers]</a:documentation>
         <zeroOrMore>
            <choice>
               <text/>
               <ref name="tei_model.gLike"/>
               <ref name="tei_model.phrase"/>
               <ref name="tei_model.global"/>
               <ref name="tei_docDate"/>
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_argument">
      <element name="argument">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(argument) contains a formal list or prose description of the topics addressed by a subdivision of a text. [4.2. Elements Common to All Divisions 4.6. Title Pages]</a:documentation>
         <group>
      
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.global"/>
                  <ref name="tei_model.headLike"/>
               </choice>
            </zeroOrMore>
      
            <oneOrMore>
               <group>
        
                  <ref name="tei_model.common"/>
        
        
                  <zeroOrMore>
                     <ref name="tei_model.global"/>
                  </zeroOrMore>
        
               </group>
            </oneOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_epigraph">
      <element name="epigraph">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(epigraph) contains a quotation, anonymous or attributed, appearing at the start or end of a section or on a title page. [4.2.3. Arguments, Epigraphs, and Postscripts 4.2. Elements Common to All Divisions 4.6. Title Pages]</a:documentation>
         <zeroOrMore>
            <choice>
               <ref name="tei_model.common"/>
               <ref name="tei_model.global"/>
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_opener">
      <element name="opener">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(opener) groups together dateline, byline, salutation, and similar phrases appearing as a preliminary group at the start of a division, especially of a letter. [4.2. Elements Common to All Divisions]</a:documentation>
         <zeroOrMore>
            <choice>
               <text/>
               <ref name="tei_model.gLike"/>
               <ref name="tei_model.phrase"/>
        
               <ref name="tei_argument"/>
               <ref name="tei_byline"/>
               <ref name="tei_dateline"/>
               <ref name="tei_epigraph"/>
               <ref name="tei_salute"/>
               <ref name="tei_signed"/>
               <ref name="tei_model.global"/>
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_closer">
      <element name="closer">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(closer) groups together salutations, datelines, and similar phrases appearing as a final group at the end of a division, especially of a letter. [4.2.2. Openers and Closers 4.2. Elements Common to All Divisions]</a:documentation>
         <zeroOrMore>
            <choice>
               <text/>
               <ref name="tei_model.gLike"/>
               <ref name="tei_signed"/>
               <ref name="tei_dateline"/>
               <ref name="tei_salute"/>
               <ref name="tei_model.phrase"/>
               <ref name="tei_model.global"/>
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_salute">
      <element name="salute">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(salutation) contains a salutation or greeting prefixed to a foreword, dedicatory epistle, or other division of a text, or the salutation in the closing of a letter, preface, etc. [4.2.2. Openers and Closers]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_signed">
      <element name="signed">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(signature) contains the closing salutation, etc., appended to a foreword, dedicatory epistle, or other division of a text. [4.2.2. Openers and Closers]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_postscript">
      <element name="postscript">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">contains a postscript, e.g. to a letter. [4.2. Elements Common to All Divisions]</a:documentation>
         <group>
      
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.global"/>
                  <ref name="tei_model.divTopPart"/>
               </choice>
            </zeroOrMore>
      
      
            <ref name="tei_model.common"/>
      
      
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.global"/>
                  <ref name="tei_model.common"/>
               </choice>
            </zeroOrMore>
      
            <zeroOrMore>
               <group>
        
                  <ref name="tei_model.divBottomPart"/>
        
        
                  <zeroOrMore>
                     <ref name="tei_model.global"/>
                  </zeroOrMore>
        
               </group>
            </zeroOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_titlePage">
      <element name="titlePage">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(title page) contains the title page of a text, appearing within the front or back matter. [4.6. Title Pages]</a:documentation>
         <group>
            <zeroOrMore>
               <ref name="tei_model.global"/>
            </zeroOrMore>
            <ref name="tei_model.titlepagePart"/>
            <zeroOrMore>
               <choice>
	                 <ref name="tei_model.titlepagePart"/>
	                 <ref name="tei_model.global"/>
               </choice>
            </zeroOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute name="type">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">classifies the title page according to any convenient typology.</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_docTitle">
      <element name="docTitle">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(document title) contains the title of a document, including all its constituents, as given on a title page. [4.6. Title Pages]</a:documentation>
         <group>
      
            <zeroOrMore>
               <ref name="tei_model.global"/>
            </zeroOrMore>
      
            <oneOrMore>
               <group>
                  <ref name="tei_titlePart"/>
        
                  <zeroOrMore>
                     <ref name="tei_model.global"/>
                  </zeroOrMore>
        
               </group>
            </oneOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.canonical.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_titlePart">
      <element name="titlePart">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(title part) contains a subsection or division of the title of a work, as indicated on a title page. [4.6. Title Pages]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attribute.subtype"/>
         <optional>
            <attribute xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
                       name="type"
                       a:defaultValue="main">
               <a:documentation>(type) specifies the role of this subdivision of the title.
Suggested values include: 1] main (main); 2] sub (subordinate); 3] alt (alternate); 4] short (short); 5] desc (descriptive)</a:documentation>
               <choice>
                  <value>main</value>
                  <a:documentation>(main) main title of the work</a:documentation>
                  <value>sub</value>
                  <a:documentation>(subordinate) subtitle of the work</a:documentation>
                  <value>alt</value>
                  <a:documentation>(alternate) alternative title of the work</a:documentation>
                  <value>short</value>
                  <a:documentation>(short) abbreviated form of title</a:documentation>
                  <value>desc</value>
                  <a:documentation>(descriptive) descriptive paraphrase of the work</a:documentation>
                  <data type="token">
                     <param name="pattern">[^\p{C}\p{Z}]+</param>
                  </data>
               </choice>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_docAuthor">
      <element name="docAuthor">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(document author) contains the name of the author of the document, as given on the title page (often but not always contained in a byline). [4.6. Title Pages]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.canonical.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_imprimatur">
      <element name="imprimatur">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(imprimatur) contains a formal statement authorizing the publication of a work, sometimes required to appear on a title page or its verso. [4.6. Title Pages]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_docEdition">
      <element name="docEdition">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(document edition) contains an edition statement as presented on a title page of a document. [4.6. Title Pages]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_docImprint">
      <element name="docImprint">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(document imprint) contains the imprint statement (place and date of publication, publisher name), as given (usually) at the foot of a title page. [4.6. Title Pages]</a:documentation>
         <zeroOrMore>
            <choice>
               <text/>
               <ref name="tei_model.gLike"/>
               <ref name="tei_model.phrase"/>
               <ref name="tei_pubPlace"/>
               <ref name="tei_docDate"/>
               <ref name="tei_publisher"/>
               <ref name="tei_model.global"/>
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_docDate">
      <element name="docDate">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(document date) contains the date of a document, as given on a title page or in a dateline. [4.6. Title Pages]</a:documentation>
         <ref name="tei_macro.phraseSeq"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.datable.attributes"/>
         <ref name="tei_att.calendarSystem.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_front">
      <element name="front">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(front matter) contains any prefatory matter (headers, abstracts, title page, prefaces, dedications, etc.) found at the start of a document, before the main body. [4.6. Title Pages 4. Default Text Structure]</a:documentation>
         <group>
      
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.frontPart"/>
                  <ref name="tei_model.pLike"/>
                  <ref name="tei_model.pLike.front"/>
                  <ref name="tei_model.global"/>
               </choice>
            </zeroOrMore>
            <optional>
               <group>
                  <choice>
          
                     <group>
                        <ref name="tei_model.div1Like"/>
                        <zeroOrMore>
                           <choice>
                              <ref name="tei_model.div1Like"/>
                              <ref name="tei_model.frontPart"/>
                              <ref name="tei_model.global"/>
                           </choice>
                        </zeroOrMore>
                     </group>
          
                     <group>
                        <ref name="tei_model.divLike"/>
                        <zeroOrMore>
                           <choice>
                              <ref name="tei_model.divLike"/>
                              <ref name="tei_model.frontPart"/>
                              <ref name="tei_model.global"/>
                           </choice>
                        </zeroOrMore>
                     </group>
                  </choice>
        
                  <optional>
                     <group>
                        <ref name="tei_model.divBottom"/>
                        <zeroOrMore>
                           <choice>
                              <ref name="tei_model.divBottom"/>
                              <ref name="tei_model.global"/>
                           </choice>
                        </zeroOrMore>
                     </group>
                  </optional>
               </group>
            </optional>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_back">
      <element name="back">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(back matter) contains any appendixes, etc. following the main part of a text. [4.7. Back Matter 4. Default Text Structure]</a:documentation>
         <group>
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.frontPart"/>
                  <ref name="tei_model.pLike.front"/>
                  <ref name="tei_model.pLike"/>
                  <ref name="tei_model.listLike"/>
                  <ref name="tei_model.global"/>
               </choice>
            </zeroOrMore>
            <optional>
               <choice>
                  <group>
                     <ref name="tei_model.div1Like"/>
                     <zeroOrMore>
                        <choice>
                           <ref name="tei_model.frontPart"/>
                           <ref name="tei_model.div1Like"/>
                           <ref name="tei_model.global"/>
                        </choice>
                     </zeroOrMore>
                  </group>
                  <group>
                     <ref name="tei_model.divLike"/>
                     <zeroOrMore>
                        <choice>
                           <ref name="tei_model.frontPart"/>
                           <ref name="tei_model.divLike"/>
                           <ref name="tei_model.global"/>
                        </choice>
                     </zeroOrMore>
                  </group>
               </choice>
            </optional>
            <optional>
               <group>
                  <ref name="tei_model.divBottomPart"/>
                  <zeroOrMore>
                     <choice>
                        <ref name="tei_model.divBottomPart"/>
                        <ref name="tei_model.global"/>
                     </choice>
                  </zeroOrMore>
               </group>
            </optional>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_att.global.linking.attributes">
      <ref name="tei_att.global.linking.attribute.corresp"/>
      <ref name="tei_att.global.linking.attribute.synch"/>
      <ref name="tei_att.global.linking.attribute.sameAs"/>
      <ref name="tei_att.global.linking.attribute.copyOf"/>
      <ref name="tei_att.global.linking.attribute.next"/>
      <ref name="tei_att.global.linking.attribute.prev"/>
      <ref name="tei_att.global.linking.attribute.exclude"/>
      <ref name="tei_att.global.linking.attribute.select"/>
   </define>
   <define name="tei_att.global.linking.attribute.corresp">
      <optional>
         <attribute name="corresp">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(corresponds) points to elements that correspond to the current element in some way.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.linking.attribute.synch">
      <optional>
         <attribute name="synch">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(synchronous) points to elements that are synchronous with the current element.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.linking.attribute.sameAs">
      <optional>
         <attribute name="sameAs">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">points to an element that is the same as the current element.</a:documentation>
            <data type="anyURI">
               <param name="pattern">\S+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.linking.attribute.copyOf">
      <optional>
         <attribute name="copyOf">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">points to an element of which the current element is a copy.</a:documentation>
            <data type="anyURI">
               <param name="pattern">\S+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.linking.attribute.next">
      <optional>
         <attribute name="next">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">points to the next element of a virtual aggregate of which the current element is part.</a:documentation>
            <data type="anyURI">
               <param name="pattern">\S+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.linking.attribute.prev">
      <optional>
         <attribute name="prev">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(previous) points to the previous element of a virtual aggregate of which the current element is part.</a:documentation>
            <data type="anyURI">
               <param name="pattern">\S+</param>
            </data>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.linking.attribute.exclude">
      <optional>
         <attribute name="exclude">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">points to elements that are in exclusive alternation with the current element.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.global.linking.attribute.select">
      <optional>
         <attribute name="select">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">selects one or more alternants; if one alternant is selected, the ambiguity or uncertainty is marked as resolved. If more than one alternant is selected, the degree of ambiguity or uncertainty is marked as reduced by the number of alternants not selected.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_seg">
      <element name="seg">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(arbitrary segment) represents any segmentation of text below the chunk level. [16.3. Blocks, Segments, and Anchors 6.2. Components of the Verse Line 7.2.5. Speech Contents]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.segLike.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <ref name="tei_att.notated.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_standOff">
      <element name="standOff">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">Functions as a container element for linked data, contextual information, and stand-off annotations embedded in a TEI document. [16.10. The standOff Container]</a:documentation>
         <oneOrMore>
            <ref name="tei_model.standOffPart"/>
         </oneOrMore>
         <pattern xmlns="http://purl.oclc.org/dsdl/schematron"
                  id="tei_revue-standOff-nested_standOff_should_be_typed-constraint-assert-58">
            <rule context="tei:standOff">
               <sch:assert xmlns:rng="http://relaxng.org/ns/structure/1.0"
                           xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                           xmlns:xi="http://www.w3.org/2001/XInclude"
                           xmlns="http://www.tei-c.org/ns/1.0"
                           test="@type or not(ancestor::tei:standOff)">This
      <sch:name/> element must have a @type attribute, since it is
      nested inside a <sch:name/>
               </sch:assert>
            </rule>
         </pattern>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.declaring.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_att.global.change.attributes">
      <ref name="tei_att.global.change.attribute.change"/>
   </define>
   <define name="tei_att.global.change.attribute.change">
      <optional>
         <attribute name="change">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">points to one or more <code xmlns="http://www.w3.org/1999/xhtml">&lt;change&gt;</code> elements documenting a state or revision campaign to which the element bearing this attribute and its children have been assigned by the encoder.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <define name="tei_supplied">
      <element name="supplied">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(supplied) signifies text supplied by the transcriber or editor for any reason; for example because the original cannot be read due to physical damage, or because of an obvious omission by the author or scribe. [11.3.3.1. Damage, Illegibility, and Supplied Text]</a:documentation>
         <ref name="tei_macro.paraContent"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.editLike.attributes"/>
         <ref name="tei_att.dimensions.attributes"/>
         <optional>
            <attribute name="reason">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">one or more words indicating why the text has had to be supplied, e.g. overbinding, faded-ink, lost-folio, omitted-in-original.</a:documentation>
               <list>
                  <oneOrMore>
                     <data type="token">
                        <param name="pattern">[^\p{C}\p{Z}]+</param>
                     </data>
                  </oneOrMore>
               </list>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_att.tableDecoration.attributes">
      <ref name="tei_att.tableDecoration.attribute.role"/>
      <ref name="tei_att.tableDecoration.attribute.rows"/>
      <ref name="tei_att.tableDecoration.attribute.cols"/>
   </define>
   <define name="tei_att.tableDecoration.attribute.role">
      <optional>
         <attribute xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
                    name="role"
                    a:defaultValue="data">
            <a:documentation>(role) indicates the kind of information held in this cell or in each cell of this row.
Suggested values include: 1] label; 2] data</a:documentation>
            <choice>
               <value>label</value>
               <a:documentation>labelling or descriptive information only.</a:documentation>
               <value>data</value>
               <a:documentation>data values.</a:documentation>
               <data type="token">
                  <param name="pattern">[^\p{C}\p{Z}]+</param>
               </data>
            </choice>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.tableDecoration.attribute.rows">
      <optional>
         <attribute xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
                    name="rows"
                    a:defaultValue="1">
            <a:documentation>(rows) indicates the number of rows occupied by this cell or row.</a:documentation>
            <data type="nonNegativeInteger"/>
         </attribute>
      </optional>
   </define>
   <define name="tei_att.tableDecoration.attribute.cols">
      <optional>
         <attribute xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
                    name="cols"
                    a:defaultValue="1">
            <a:documentation>(columns) indicates the number of columns occupied by this cell or row.</a:documentation>
            <data type="nonNegativeInteger"/>
         </attribute>
      </optional>
   </define>
   <define name="tei_table">
      <element name="table">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(table) contains text displayed in tabular form, in rows and columns. [14.1.1. TEI Tables]</a:documentation>
         <group>
      
            <zeroOrMore>
               <choice>
                  <ref name="tei_model.headLike"/>
                  <ref name="tei_model.global"/>
               </choice>
            </zeroOrMore>
      
            <choice>
               <oneOrMore>
                  <group>
                     <ref name="tei_row"/>
          
                     <zeroOrMore>
                        <ref name="tei_model.global"/>
                     </zeroOrMore>
          
                  </group>
               </oneOrMore>
               <oneOrMore>
                  <group>
          
                     <ref name="tei_model.graphicLike"/>
          
          
                     <zeroOrMore>
                        <ref name="tei_model.global"/>
                     </zeroOrMore>
          
                  </group>
               </oneOrMore>
            </choice>
            <zeroOrMore>
               <group>
        
                  <ref name="tei_model.divBottom"/>
        
        
                  <zeroOrMore>
                     <ref name="tei_model.global"/>
                  </zeroOrMore>
        
               </group>
            </zeroOrMore>
         </group>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <optional>
            <attribute name="rows">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(rows) indicates the number of rows in the table.</a:documentation>
               <data type="nonNegativeInteger"/>
            </attribute>
         </optional>
         <optional>
            <attribute name="cols">
               <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(columns) indicates the number of columns in each row of the table.</a:documentation>
               <data type="nonNegativeInteger"/>
            </attribute>
         </optional>
         <empty/>
      </element>
   </define>
   <define name="tei_row">
      <element name="row">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(row) contains one row of a table. [14.1.1. TEI Tables]</a:documentation>
         <oneOrMore>
            <ref name="tei_cell"/>
         </oneOrMore>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.tableDecoration.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_cell">
      <element name="cell">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(cell) contains one cell of a table. [14.1.1. TEI Tables]</a:documentation>
         <ref name="tei_macro.specialPara"/>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.tableDecoration.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_figure">
      <element name="figure">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(figure) groups elements representing or containing graphic information such as an illustration, formula, or figure. [14.4. Specific Elements for Graphic Images]</a:documentation>
         <zeroOrMore>
            <choice>
               <ref name="tei_model.headLike"/>
               <ref name="tei_model.common"/>
               <ref name="tei_figDesc"/>
               <ref name="tei_model.graphicLike"/>
               <ref name="tei_model.global"/>
               <ref name="tei_model.divBottom"/>
            </choice>
         </zeroOrMore>
         <ref name="tei_att.global.attributes"/>
         <ref name="tei_att.placement.attributes"/>
         <ref name="tei_att.typed.attributes"/>
         <ref name="tei_att.written.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_figDesc">
      <element name="figDesc">
         <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(description of figure) contains a brief prose description of the appearance or content of a graphic figure, for use when documenting an image without displaying it. [14.4. Specific Elements for Graphic Images]</a:documentation>
         <ref name="tei_macro.limitedContent"/>
         <ref name="tei_att.global.attributes"/>
         <empty/>
      </element>
   </define>
   <define name="tei_att.global.facs.attributes">
      <ref name="tei_att.global.facs.attribute.facs"/>
   </define>
   <define name="tei_att.global.facs.attribute.facs">
      <optional>
         <attribute name="facs">
            <a:documentation xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0">(facsimile) points to one or more images, portions of an image, or surfaces which correspond to the current element.</a:documentation>
            <list>
               <oneOrMore>
                  <data type="anyURI">
                     <param name="pattern">\S+</param>
                  </data>
               </oneOrMore>
            </list>
         </attribute>
      </optional>
   </define>
   <start>
      <choice>
         <ref name="tei_TEI"/>
         <ref name="tei_div"/>
         <ref name="tei_noteGrp"/>
         <ref name="tei_editionStmt"/>
      </choice>
   </start>
</grammar>
